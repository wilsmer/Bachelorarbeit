%!PS-Adobe-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: VorlagePSTRICKS.dvi
%%CreationDate: Tue Sep 13 12:26:48 2016
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 305 137
%%DocumentFonts: NimbusRomNo9L-Regu
%%+ MathDesign-UT-Regular-Italic-MathItalic-10 Utopia-Italic
%%+ MathDesign-UT-Regular-Symbol-10 MathDesign-UT-Regular-MathItalic-10
%%+ Utopia-Regular MathDesign-UT-Regular-OT1-10
%%+ MathDesign-UT-Regular-Extension-10
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o VorlagePSTRICKS.ps
%+ VorlagePSTRICKS.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.09.13:1226
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texnansi.enc 0 0
% @psencodingfile{
%   author = "Y&Y, Inc.",
%   version = "1.1",
%   date = "1 December 1996",
%   filename = "texnansi.enc",
%   email = "help@YandY.com",
%   address = "45 Walden Street // Concord, MA 01742, USA",
%   codetable = "ISO/ASCII",
%   checksum = "xx",
%   docstring = "Encoding for fonts in Adobe Type 1 format for use with TeX."
% }
%
% The idea is to have all 228 characters normally included in Type 1 text
% fonts (plus a few more) available for typesetting.  This is effectively
% the character set in Adobe Standard Encoding, ISO Latin 1, plus a few more.
%
% Character code assignments were made as follows:
%
% (1) The character layout largely matches `ASCII' in the 32 -- 126 range,
% except for `circumflex' in 94 and `tilde' in 126, to match `TeX text'
% (`asciicircumflex' and `asciitilde' appear in 158 and 142 instead).
%
% (2) The character layout matches `Windows ANSI' in almost all places,
% except for `quoteright' in 39 and `quoteleft' in 96 to match ASCII
% (`quotesingle' and `grave' appear in 129 and 18 instead).
%
% (3) The character layout matches `TeX typewriter' used by CM text fonts
% in most places (except for discordant positions such as hungarumlaut
% (instead of braceright), dotaccent (instead of underscore) etc.
%
% (4) Remaining characters are assigned arbitrarily to the `control character'
% range (0 -- 31), avoiding 0, 9, 10 and 13 in case we meet dumb software
% - similarly one should really avoid 127 and 128 if possible.
% In addition, the 8 open slots in Windows ANSI between 128 and 159 are used.
%
% (5) Y&Y Lucida Bright includes some extra ligatures and such; ff, ffi, ffl,
% and `dotlessj,' these are included 11 -- 15, and 17.
%
% (6) Hyphen appears both at 45 and 173 for compatibility with both ASCII
% and Windows ANSI.
%
% (7) It doesn't really matter where ligatures appear (both real, such as ffi,
% and pseudo such as ---) since these should not be accessed directly, only
% via ligature information in the TFM file.
%
% SAMPLE USAGE (in `psfonts.map' file for DVIPS):
% 
% lbr LucidaBright "TeXnANSIEncoding ReEncodeFont" <texnansi.enc <lbr.pfb
%
% This tells DVIPS that the font called `lbr' in TeX has PostScript 
% FontName `LucidaBright.'  It also asks DVIPS to expand the file `lbr.pfb'
% into PFA form, to include the attached `texnansi.enc' encoding vector,
% and to then actually reencode the font based on that encoding vector.
%
% Revised 1996 June 1 by adding second position for `fl' to avoid Acrobat bug.
% Revised 1996 June 1 by adding second position for `fraction' for same reason.
% Revised 1997 Oct 1 by adding cwm  (used in boundary char TFM code)
% Revised 1998 Mar 1 by adding Unicode for Euro character
%
/TeXnANSIEncoding [
/.notdef % 0
/Euro % /Uni20AC 1
/.notdef % 2
/.notdef % 3
/fraction %	4
/dotaccent %	5
/hungarumlaut %	6
/ogonek	%	7
/fl	%	8
/.notdef % /fraction %	9	not used (see 4), backward compatability only
/cwm	%	10	not used, except boundary char internally maybe
/ff    %	11
/fi    %	12
/.notdef % /fl    %	13	not used (see 8), backward compatability only
/ffi   %	14
/ffl   %	15
/dotlessi %	16
/dotlessj %	17
/grave %	18
/acute %	19
/caron %	20
/breve %	21
/macron %	22
/ring  %	23
/cedilla %	24
/germandbls %	25
/ae    %	26
/oe    %	27
/oslash %	28
/AE    %	29
/OE    %	30
/Oslash %	31
/space %	32	% /suppress in TeX text
/exclam %	33
/quotedbl %	34	% /quotedblright in TeX text
/numbersign %	35
/dollar %	36
/percent %	37
/ampersand %	38
/quoteright %	39	% /quotesingle in ANSI
/parenleft %	40
/parenright %	41
/asterisk %	42
/plus  %	43
/comma %	44
/hyphen %	45
/period %	46
/slash %	47
/zero  %	48
/one   %	49
/two   %	50
/three %	51
/four  %	52
/five  %	53
/six   %	54
/seven %	55
/eight %	56
/nine  %	57
/colon %	58
/semicolon %	59
/less  %	60	% /exclamdown in Tex text
/equal %	61
/greater %	62	% /questiondown in TeX text
/question %	63
/at %	64
/A %	65
/B %	66
/C %	67
/D %	68
/E %	69
/F %	70
/G %	71
/H %	72
/I %	73
/J %	74
/K %	75
/L %	76
/M %	77
/N %	78
/O %	79
/P %	80
/Q %	81
/R %	82
/S %	83
/T %	84
/U %	85
/V %	86
/W %	87
/X %	88
/Y %	89
/Z %	90
/bracketleft %	91
/backslash %	92	% /quotedblleft in TeX text
/bracketright %	93
/circumflex %	94	% /asciicircum in ASCII
/underscore %	95	% /dotaccent in TeX text
/quoteleft %	96	% /grave accent in ANSI
/a %	97
/b %	98
/c %	99
/d %	100
/e %	101
/f %	102
/g %	103
/h %	104
/i %	105
/j %	106
/k %	107
/l %	108
/m %	109
/n %	110
/o %	111
/p %	112
/q %	113
/r %	114
/s %	115
/t %	116
/u %	117
/v %	118
/w %	119
/x %	120
/y %	121
/z %	122
/braceleft %	123	% /endash in TeX text
/bar   %	124	% /emdash in TeX test
/braceright %	125	% /hungarumlaut in TeX text
/tilde %	126	% /asciitilde in ASCII
/dieresis %	127	not used (see 168), use higher up instead
/Lslash	%	128	this position is unfortunate, but now too late to fix
/quotesingle %	129
/quotesinglbase %	130
/florin %	131
/quotedblbase %	132
/ellipsis %	133
/dagger %	134
/daggerdbl %	135
/circumflex %	136
/perthousand %	137
/Scaron %	138
/guilsinglleft %	139
/OE    %	140
/Zcaron %	141
/asciicircum %	142
/minus %	143
/lslash %	144
/quoteleft %	145
/quoteright %	146
/quotedblleft %	147
/quotedblright %	148
/bullet %	149
/endash %	150
/emdash %	151
/tilde %	152
/trademark %	153
/scaron %	154
/guilsinglright %	155
/oe    %	156
/zcaron %	157
/asciitilde %	158
/Ydieresis %	159
/nbspace %	160	% /space (no break space)
/exclamdown %	161
/cent  %	162
/sterling %	163
/currency %	164
/yen   %	165
/brokenbar %	166
/section %	167
/dieresis %	168
/copyright %	169
/ordfeminine %	170
/guillemotleft %	171
/logicalnot %	172
/sfthyphen %	173 % /hyphen (hanging hyphen)
/registered %	174
/macron %	175
/degree %	176
/plusminus %	177
/twosuperior %	178
/threesuperior %	179
/acute %	180
/mu    %	181
/paragraph %	182
/periodcentered %	183
/cedilla %	184
/onesuperior %	185
/ordmasculine %	186
/guillemotright %	187
/onequarter %	188
/onehalf %	189
/threequarters %	190
/questiondown %	191
/Agrave %	192
/Aacute %	193
/Acircumflex %	194
/Atilde %	195
/Adieresis %	196
/Aring %	197
/AE    %	198
/Ccedilla %	199
/Egrave %	200
/Eacute %	201
/Ecircumflex %	202
/Edieresis %	203
/Igrave %	204
/Iacute %	205
/Icircumflex %	206
/Idieresis %	207
/Eth   %	208
/Ntilde %	209
/Ograve %	210
/Oacute %	211
/Ocircumflex %	212
/Otilde %	213
/Odieresis %	214
/multiply %	215	% OE in T1
/Oslash %	216
/Ugrave %	217
/Uacute %	218
/Ucircumflex %	219
/Udieresis %	220
/Yacute %	221
/Thorn %	222
/germandbls %	223
/agrave %	224
/aacute %	225
/acircumflex %	226
/atilde %	227
/adieresis %	228
/aring %	229
/ae    %	230
/ccedilla %	231
/egrave %	232
/eacute %	233
/ecircumflex %	234
/edieresis %	235
/igrave %	236
/iacute %	237
/icircumflex %	238
/idieresis %	239
/eth   %	240
/ntilde %	241
/ograve %	242
/oacute %	243
/ocircumflex %	244
/otilde %	245
/odieresis %	246
/divide %	247	% oe in T1
/oslash %	248
/ugrave %	249
/uacute %	250
/ucircumflex %	251
/udieresis %	252
/yacute %	253
/thorn %	254
/ydieresis %	255	% germandbls in T1
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: MathDesign-UT-Regular-OT1-10
%!PS-AdobeFont-1.0: MathDesign-UT-Regular-OT1-10 2.0
%%CreationDate: Thu, 29 Aug 2013 17:19:55
9 dict begin
/FontInfo 10 dict dup begin
/Version (2.0) readonly def
/Notice ((c) 2004 Paul Pichaureau, under the gpl licence.) readonly def
/FullName (MathDesign UT Regular OT1 10) readonly def
/FamilyName (MathDesign-UT) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/IsFixedPitch false def
/UnderlinePosition -98 def
/UnderlineThickness 54 def
end readonly def
/FontName /MathDesign-UT-Regular-OT1-10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 61 /equal put
readonly def
/PaintType 0 def
/StrokeWidth 1 def
/FontType 1 def
/FontMatrix [0.001000 0.000000 0.000000 0.001000 0.000000 0.000000] readonly def
/FontBBox {-15 -491 943 760} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC4458BEF7EB4BF9CA685821DAAAEB8ADF
892F4EB5CC669C655007A1C4B5E91678CDCF7A89B25FB0FB53FF6D3A61CB7231
A1EFBC7D17D40265074C7528E4523FC36BDBE32CF0CCDB6D3AAB064540916BBB
F6400E79B0D769C1CFC9F219BDE40F7AFE53D3C15AD879B51CD0D19A11160BFE
160278724512B082FF8FD28F8D9D5D0739CFB0CFB691F56358EDE43F651287EA
2411E5C5693CCAAD08519246A1F7394606CCEA24B236F7389B7C6728456626B0
577EA8B39FD691E8D8FF16C9FD07FDC7921FF346ACBA0F5C9EA424CB0B2EA314
16A005EE683B428A2D2D1A6A15ED5466BC80AD8D0570AFA303CE914C678386B6
07865906F4276B92EA7C98932F14851F8155040BB2B7C70C0C9321B6A62285E0
7D38CF8A938C5FC6B89352CD3593A4FEB66954072B94C019B9ED49EE4EC7E0AE
AE48940A702310FEE3D1E8894371757AA34E684E040A913FE712593371E4A2C6
496F6CA0CBD0C205E3FD95965B32AA6D1F4233469A1434098A2A2BCC9B08312D
EF48D09D0260A1E02978DCC651A74B2D99038B2AC16FD3729746E24084BA437B
AAC63A7A2DBCC89CFD7FD0115E7809711E92AD1A95B3174E67523AAA40603643
568AC4661FC0BF21A3A37D08F7756FEE7A74F4A3C645629EFFA4BEFEF608C541
EE55684EBCA163A0123D7B83CA9468D4BAD04CC423FD17A6180B8A42893E7AE6
F0D98F99EE8C5B8A4C7C39689B51C337D4309EC4C161751901B8E305A51174A3
52B4287124520AE198A10E1E8A1F9B671148DFAFCA347C9D511F10B7F4BE8706
B2E1D860CAD9F2BDAA644CB25A2AE17E65989C554B680E31469B6B9E53CD2AC5
B6236AE9C148AC2EDEB838D01627CBCA08DEE001A969A2171302D9D4469ED144
17F4FC02725AC6A3C0D023318435EF68C1E3D27777E8BA3B00F0A77D32FEC3BE
F0851050538E45282B2A3D6CA86FD032B4540EF00CF5D8AF000FACB7642CB47B
759CF35BABB120CA770A4BD773638E5CB91B1AC3ED44705B71660F8302A34E49
9F546E807ECC4DAD864C8B48160EF78BCB60000904BEB0C1F3CFF594E0CB62B3
7B4EB0E0D344A118752F23BEBF39916EC4DE4C80C2F4E2359B4C709E592B5338
8D3B46FBF5AB16D7E2A3FC0168B7C9C2867719E8378E8B4F9AED1D20E820837F
C905F3E55706DAA729832456E229AF679D028C40BD82C9831CAF6CF715A7DAFE
6062658B0FBB524AEDC1FCB8473009599E8F29A5645DA0F2D711FB4D9FE97794
6FAAB7F7E180C167773A98E09E6A816DD798DE9E9F2DEA716EC2A5490D42439F
D75C1D03150A205ED5A9F1AE7ED883C062C2AF78CFC9EDD1195D91EE4100B95D
DBEFF4B5B4EC8323F4888EFD14DD9D06240C3A8202A45E454A8F91807CE5E62A
4B6761FE00CD45999E4168F9897533821E65CB242F012B21B236804BEB108B7B
D46F6FD9890F48A6FEC6E9645198500D30814D25C7B35DD062C278CB5D59BFF8
52884EC8455F379ADFC5EB23DDE7B32BC2A57E821B049C9AA19131FE0E795CF1
21D02D9401901DD12239A684AD197A3DACB67A0C8348224D1115E4256D05C354
1C6E1E2DAD06753F9F1D6DA117C023B2F0BF1E7882169D71BB76457D1A71841D
99174E4BF13027864B941BFEC5E99A68D3A0B0EBD13EE0B7B1353409F724C3FE
D84157A4ACEF9D35896C540F45CE8A32ACA433EEB144684940A67FEBBEA57A61
DA939176F3ACCD5EFFAF6F7332DACDEA2AE6C8D0C074816D5AED3604F698A0F8
DA23856421407E2007A8C4E61661F64CFF8C8253E43074286A4AE39B3349A532
7260ACA005B2FD9EA6DD4FA0E75A402A26F8D86056B36B9152CF7C185426CE4F
F7E5B7D30613C489CCD04B96F68F8FCE7E4B7781EDFE59BD1079166082CB0FF4
565B899673288392E2727FC8FC07C3C704FDDD0F52427F56B4D9F6EBE5527F00
45F14797CDF60A91C69347B735141336D4D1B60B2E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851486
6231FCEE4FBABAE4913C60D921566C04D593328DCF84A2669900B051C12BC2D1
108D6DFA86356A0E97DA2C4C788675A7DA35BB3830877513E4B5D17325B646D3
235BC0EE22617EC0A37C43D1F141FAF77E3886F0383670A99D2CE7E7B60D1F55
A573397370C41D8A6728E403BCCB910C4959D4EFB58C3ACE93B53087C1F2490A
05E4EF82134EC4198C1D85E2D8DA3DB454B1BED8FFCABD064949F2C2FF8587CD
1BE5A03E1471FDAD8752BE3E05933B60E18DDEF789048BC0373F0F9C62338F7E
B136432C42A7AA8AB24C7A9106BB5E7513D01560B819B554AC7254747CF98489
33D4355629B720769132C6892CF7C2A423A6835043F5C69BABCA7A39269AD599
E79B3D21432F66E1C5DCF4C788F030D1CC1A7DAD437A2BA75753015297A293C0
2937B0EF1FF010183BF25E1F42FFDA16E67D915592A91D473B714ED435060011
EA3A3DCB2208172728FB0D388C115696C3D4E372B3B85E00F3BAF2B8F2B50DC7
998C5F523AEFEC13B4B98D2601E9462DF4721D843E6456314E65083022A07F2D
990392C923A50DAEE9E2940461448F8EE471565F093B46A91763A70B6185DA60
D1931C72F54A219942A6936FDBB215BB26CCB0D0BE44414183E90CC30D98B01C
EA5AB3E92D55775EB0B39A6BC253AF3E1E8C75F64925B7EB3C9EEF5622DE7A1D
D87E2677111F9315946BE1B3456541FE83998EF72647779B349D73D1C264906B
285C38644D873E9AFD34DD18CFDEE45C2EDF2EFB584ADF8FB0C0ABC55E08BC83
D47360B57ABFD2849D498C23A0BBAC78BBA0A22864C4DB72057C6D034EB8530A
9380711A377648352FA6E012EC7C96A2745580EDFB53F14E7E4BAB92352105CA
4CDF99F477807237ED1E8644590A24BAA7E7FCAFE19C5784B2B7C7C53B009E9E
A4FDDB5D20D709BFD81EFA9E51AD12186E5FF62BBE155F89DDED69723FCCB083
F2445E822AAF698BBC601273F2AAE4749144C54DB9518F932C39D6EAD9A628CF
DD74CC8CFEC1E547E017430952ADC3FA5A495B3F375F3A03EBCAF0134F9E19DF
BD2BF4BFE16F044CBF0A4716AF17B0EA1B5C3769CE8871B49AAF29194DE33DB1
E6B67199934371ECBB9B499D9141B9BE790D20E09CCB065B2CE1ECB87341A15D
8BBEC87F16359EC016F94ED05EFF8A624D8458C84ACBB96334D5DD1135B1D261
236A9754E118AB6DA3F541B8E30DF043E3C81A3F255D199A070D3419710D6639
6F56C009B8958DB049BFF3E017E8C804239B270BB516FA3F814B2EAC6162483B
CE2872CF885EE57758C025179A19210BE64E9803BA33DB5CBBA6E4E4797BF8C2
D534E669A162E422811A9046778ECD2474032BCA544E518E779904CFA40536E8
3FC0FF74FC7B425EC9E4A0135C64145D76EBCC5CB1F7A93C0052A572AA50B3E9
48AFD3978E251BC4A42EA8F90CF71131977F36C48BB4F3106225A200625466D6
F91505153344F8C5593A00EE1AC53096FAA342624E82FE3E98F75FF23044F327
58EF688D9DCA5C2B04753E7B5355A0EAC525100A5B4998F156F54D6301D64EB6
29A3EA61D00494084DE0E78D628646F19EA66137C297303E2CED3B9591852579
4DE9B9522FA8A481581AD21247EA158DD7B4E8E9A11D95DD198C51BE09B2DB2A
576504D777A5BB17D9A2C5311CA723188D86D486FADD026C040BC520FE1C3696
C704744A75815233442DF667AF3BBA1118155680284BD50D9DCF61547347C4D7
CAFC2C9DDFDD8563C0F1CD987D507532CB44CFAA818AA9BDE03FABD773BD2C99
763DD24C780BC8DB84CA3C4F4E14B3FBE3776948F8D38F4805C5C677E9EE3D83
B7A97789FD9C2FD58F90E1021CBE76C3A4B184C678F7CDD1A1C65DE434A8746B
5610EAE5AF438047D9DA1EB8B694508AA46890F4CD08E03841BB3DDC3172FE97
7CC49699FB8BAE049517BC34CD7C0C2478EB2FDC66486CB43C1038816F5EDE37
8F22F5353BBA2F83AE4A2886F5EF2BE96C092105B7D7DA528D26A900942739DE
B8C7E86DFC9C84C9A54D301FD690A456DBD9A6BD665673FE04FE07EEA974D6BA
21C49209D09EAC0C334CEB9980702BADD1EA952901FDD5054AFAB3CEC30040CD
289656760F26603C0376D8E13FE274EFE7CEA89D879EFBF0D6784D8BCDE41D86
59A891FFCDE4EEA493F9E39BA6999F8E27C6B80EAF77C4678AAE4E59E5DB875B
77CFFC482C0214CE20C2ED8F04F7CBCA8439009C2ED36A33E97F6D285642BE31
A8B5C97D4588A4C892FFCCDA117BA616B1432225CA41389615ACA553C529DA1F
868CC60C3D15AE5D01B7D747FFE9BF4FFAAA0D6E5613A6F4EC09911CBD9CCAD1
569B96547A21D6F979EEDC9C4101F8F792B92731E4893982180ECCCC77586E0B
FB7367DD9F7A924A9A35EDEFF5A8C0867333FC5EBCABD0A455B20D66D52D77C3
F269C4301C5AD3AEBED875914A2546AC3515508AE40CCDB1A0AA99A040FE5F6D
3691970C42B680E44C980F349927927981E3955A5ED994DDE5F2F92341A27CB8
FEE8FFF3493F875241CEA1DD479B3A711C2683C4F200419C17C0C2BACDA8F6DE
DA486F7D577F997AB50224B2CC9C3CBC78BFFDB56250A7D1AA96C29817AF06C6
553AAD6E4BCC306E7D7F21FAD8E0955D009995011177AA7469F8B97A93E42AB0
6031FEABFF2D55AB37EC2FAABD102BD7326EBB2DB6576AE85A29BA57FD62C31D
D4147D598B33C963A40151CDC2478F80EA54B605DA229049A6A225D902D755AB
6A0DD11E4CFF3DAB7E1A67E6F025F612E814685DDA19B51DB2701321F8D4A69E
15A79DAF44DD2A0E854D72F0154E4B79B16F95672E47A500BF2D06CDD4D82A59
4EF0BDCC8B782477B26FA78BAAB0710DC00D010953ED0EEB16FFDEE6C3F493D1
6C8D4DF87FF054009E0C18A6CDD79A38830C33E1BB26137253BA8B6AC6C253E9
1ABA024C233FA39DBA285A634784B5F1F90F0B10B975B217F149C35394464D34
D70D2050CC68E261FA07D467717B96D93FC8A78587E1259B12376371CC3040EE
C0352C96C4610247B945865D42CA34680CDF9AA55A1BB7E1CA3B56A1667E12B0
7C65D7A3AC11D76E7D1456860C14A66AB0D9659B81A179391515116E6563EBCD
9371F362DB2BA5294A43A57869E09E0F7829AD53D2B95CFC3B97B1B189203DF7
23F4794A4608FE944590C1F2B3D9748754308B3DC9D1070A7BEC1DB4C52C7357
F7BC00A7E425D78E2AA6DE2DBE90C79FE24F1A8368C23457428A48E0162152E1
032320856A5B740DB47B979F38498E5463A916F245476BC63C53F306FFA3ADAE
DDCCF2D23D28B6228A8E3AA478EF7D37A5A17AA6EAD84FB26BAB62BB381907EE
05D1706F047543C626E27A0621B4D4B05507066A5ECD22389437002F375A1930
A3C319551BD26F4ECFA106271029E3285A327DB45669C99CD4E7848A25F2E7BB
E87B957DFC0E2133AB508D2F87DEBCC3A12114CCA0ADBB4D53C5BF8668DFDD49
82C089AD4A78408DF8DE9C73EB3A2863DAC1F202DFA91E59D95B6273500E84CA
30ECC8B017D1538CA349C42115FFF4545D5E61AA18BF04C375EE7689B98DDDF5
76742ABE0538FB7AB00F7D604CB845D5E7EE21298068B444E7BE8F8EEA947457
36395AEC414E5AD9FCA409578ECF6BF06DC2179D17F62B1EE0E261AFDE818948
FCE180655F2836ED1F9AE7F2F8CC156AEEA9318682488EAB0EBFB50FDD34CDC2
B76DF1BEAE4067C709C3E41F4EF6A81C0FAC337A4EE5A95256B0E22C799747EF
40E66F956E98A1BE0C561289A79633020C527A1F1493A54F1EFAACFE83018EB5
13B9E9F140506C1BC5710F29B4CF6AB7B24C7FCDCD4BE0035D488893950B2D9A
7C14479025C94F55752CF01015F51000CD3F2B1FFF47E4533DA65E358F53C5E1
21EE708FE62CBE16450911B9742ACBC58FF9B3CFDF3AC2929B1F18ADA58C7227
0A9A4320DA482DB94A661F0C097ABE5CE1411A0005560EE26C6009475F81CDC4
89E4C6D6CD669AB3C97F15CB4FECA6EA498BF279BB4496207AB50074C2F7B1F4
298B24869FCFC7C1AA06E10860AB33CC2A32BB05764C514F4A59ECC4344E7610
0DFA5D06EA46307E529304D0A9E8B79EA6F97218458D41404CFE87CC28470D63
8D004E48A987EE709E74795314CE0EA79FB2DF0780C957FD692652886BA8B770
CEEC999D9FA5AD31E3EEB2451DACFEE99AFB8DDE56AF7677B56CD3FDE40B8DD6
230FD4D3FE4C32956B23D3AA5A8DFB65CBC412E9C56D470B4EF2F9A8AA42273D
6D50A71CD1208F5CEED47A52BDF1D97E15178E0358792AF8E1A188961A3A75B1
5151088234AA869B98DAEFEF00BAB905BD7D67725CB1DC8CC08D858B91CBDB3E
0DD2734A6DA6617E3A56E5C2A57259E74E12FC1F5F5E63982C2BF0494B127D6A
0EAE7EC87A8357F7082854FB59140479458987FFD6DE52905B69143949393BDC
ACE78B9BB56654411A46D0EEC9F452135865FC93BBCE1DA1CCECAD509C074EFA
BB241DF4099674DA3CD780C6C6C96CF09019821E3A978165FE40F0733261B507
041362FD1CA679E905216035F189CE79ECDADFD19815DF571ABDB6295ACE4C06
C49018566C3CEE1089F70045630436BCC3F89F3DC45C64A4540CE8ED929E55C9
54A7FEFBAC66BB499245514FB4863BB856BF96655EF28BFC3E67E51382378868
22F964EE3803862F5380F0EE8F6AE215F8679BC13B7748A988FC9808CBA4ADE9
5036D23127554A45816F11C1711B6FEDE764F559C59D40F48DF92AC063F61C9F
D18373B839FF9338A09E29BEB0A1977AE6210893D4EA78FB8EB1DAC832CD24A4
6A9757D943079B711F0F159525A1969DC18594368A2D56BD802A94326F1813FE
B66B42AAFE8F74E9E8782D670AFDCFF9DCA956F1D0F86BE81498F1290FAFFE1C
FD4672A05FA61604934BB5E807B6A4301C34EAC693810ECC15F7B5FC55006842
2F99A0BC8A38000390D36BF31ECFB195416FBEEA9A80C3B22C68827A89C6C81A
102A7E0A3A9AEDB29E4E4F862B58DE04EC250A18470A4221BC0F0ACD46A06FA1
697C2FD361A699A0F145F065520447620F355DFC78058CBD609B445E9B160FF1
0E32467CD2247A269CC09F260ED0823F94B9AF93AB2AA8C916422AF064230E86
933E34E7D58E98A4C8A68806BEA865F81614B15460AEFB56DB1B79C003C65EBA
2AA69170D8C568BE6010C33CCE37E58305DE0344DF200FD544568AF2B5993448
A91F75E4D5BA27645367188706C46134B09B4E6417FD13ABD564658353BE1CA3
44651196F757C6F303CFAD5E833B6A561DF3A56C0570768D28FCE6B2AEF359D0
10C65F5B83E9CEF6EA95CF14177FB453C94897478F51398DB1EF607D12F488C9
D8476DE8E217C9CF1548A337B7D1EE596E98104060043017B3ED91018A84D3DE
799F407CC293D890A28F4D8ECD2F289B9D7DACAFC16103F0C66490127D2A3B7A
3E42525D2900F87FD6380FBC4E3367DE4DB71320EF4FE96FEA42C922067BE860
3FFFFC8BCC3D355A7D8E2BCDF099DEBEA495EE125B11AC8F5C149E95FBE8891D
68A761D9A3C229C31FE1B3023AA3650BDB40A618EFED89C421A9A6DEBA7191E2
B5E55EAFABDBEF3BF5F9852614143B19587436710186EDDA40EA97BA74A5E081
E6A953DD6F46E98F9E91F80AF982F9653F1F7F8F93BB3B885EC23392FB29631B
64CB7110D2488313C40486C0677AE3A5574ED336D136F05CD2E3A0D94702D2F9
D1A2F6587AA834663704C89AAD7E74746DF927B1B78AE0A73F050C51C325BCF8
B1F5AA9237A6F2C9E373342D1D95A4DC9ECE699DCC7CAF542B507DDD77014C29
20FDCAECC6275FBFF5074A8C01BA552A4E9644F4CD162776D2A0EC09C5D7F55E
72948D2DF756810D7BA768BDCF90E0EF1CF32B1E4EF9E1A8E88267DDCD3EEBDF
2A8C0492A24DBA885D9D7F74EC35EE3B7B83DD252E47938D2AA2A03654F97AA2
1DC6CF3E58AE548F8B9EB683E4873E7FF5601358BFC654F3F51341308ED6D4A3
C36313FD9D352D3A7BB0659B58D13BBD84E1216F139D46657F9795AC6AC4306F
1305ADA294B8874E0218479843BA9BD7FAF597F2AC5D0958D56EA9D08FC4A9B9
5B9A4F1C1028175BF383AD06C029F590EE857BE3B4D874CF6FFB01E4432BE6C5
6F0E86CE9CF8612D5CC0D529C5CD0B04FC2137385BE0E76F63EB9F926D68E48C
533C98B05988C306058ED706507E8035D4FB48DD7FDEAF34C1C1A3BAC53475B5
95D21CB37C99412601C9615F722DA9E94E8D31831EF4C64769914F73AA3E60B9
9A98D652C5F1163105C63AAABF817C39930AD510D9E32AB0ADCE5797F05566D7
059656980DCF3B46129333A27ED7EE2A6148603CB9295A53B9711FAFC0F0648D
876D97FC3CE99538FB2548561FF5E7C335E25E5C12D739FD773E8672578311E7
72DED3D1A86D2FD3791454D26B90706004ECB344C0F9453189A1D71C0EE48F2A
BDEF35C137E1F5A9F2BB9BF99945C1D16DBBF96EF5ADB159E2C905459D144E9B
78FA5A7A672C4F64AB1DDA824686D085BBED06FD78E23E35AC4EFA33A123BEC1
2B7E4F5DC3A1AFE6E66913D3A89668E7B8614ACB66F2FD4C3E73C6000D1BBE23
CFA17F1AF9BEDEDDC56C29BF76E1A7D08A8ED6857D7C042F5B73CC94D65E9A64
F37E7F9262FCBE83B62DCCC0AA850EE235624A248C2DA92BEE9F2740848C3B02
C04D9FB9F4DBA77E597DC3B38D8B3697FCBE91A9397B312D84FAA0E3BCB74A02
EFA23054867286EED3003DF9EB01B2B0A8B2633B6F37E3D2C356B99D8C8EEC58
59806531A76153253E9FFC5571867ADB2A7BE90332568D9E5542DC7C672A6709
0FAF972435D8317B77DCB77B25510331F730BC9BDE9DEE1E8963CD4D15ACF07A
F88AA9F9F7AC3A809146C780DF517870EE866802847169B5D876693880BDC6E0
0A06492C54E3EB596B08954C0E694A20846A32154D39CDCF6E2A0553EBF8780F
FAD5FF148607A45721DF8F603828F444803CF44B01595D76ABDBFE5F743FFDA8
AB6E02173A138F2A853F74C475451E8F20774FC7703626590C8D10A6C3C2DDCF
5DA974B234E6232BC798A171C905E9D61DBE6E3C0B1610DB8647CE1F78712961
DBA6E1696557BD6CB86877044E10F0B2118915B8E58564FF92389FF7C7F3BE8C
6BE842785089856E54B5F3DF91A3466527B59B0CFDAE2C9D0CDE1D91BA212EAD
1CDFECE6B6EDCA2206AF0735FD937886D7ED3F27C182E2185645D04DBF237C07
4120DBA1971E39FD56C9C0D436281A66C708D48FD3B3B6E5740E92018504DA1B
066E005AEE72C6BE223DDDA4BCD6B493B49FA8CB0C5010822BED9B091862AE5E
C09A6A1D319D8EA233C010A127F1AF649B97E627D516DD85DEA514D300575C2E
C4D8B0F73B4A0B3F8E68B8C654EB23535876EB8D867E0B7A0962E50C2806C992
57D6510A03412DBCBC3FDC7039B6F9D7E12AA15E98C9E272CF2209E54920262C
F327B50EB05A9630F506488044F2E2432A65BA21E90F6826750E2F20AE3C41A4
FBFC4B06016EF5E26738D3636FB9D3B60690F8802729FDB9E9F3A14F9BFB94D2
1D943D332800A49E2B7D08C5D6D9B321855BDA529EFAFE44BA7947B688D4DAC5
234CD9385A5AFA0161B6017F1758983034FE530BC0441E0D0677CD16D0EB243F
926513AC03475AB8D645F9220C5FE36799602E3125D2A68A1F275C92BF065031
662A1B521B53984AB0CB15C1E3A569D45D9EF8824628E72B129E947AE74C3D19
DE6FDDDD36B6E81FE9428869A662B423B0A735E7F40E0251F15C387253E2E8F9
63892C7A014A085DD627628FF3A1415910C5A016968248D5B79889EBCC5D3A75
109042EB2EF3F845B1EBD7CCB6319582E520354999BE9327AAE8530113482B8A
8B07AC946D30C175AA223ED391C8D5FEEBE5773408C19817F0CA2208A50DD46A
8AFFC1C8F811D3F2FFA7B04EFD6FE3EC397AF9D0BAF979312E1C66AB7E6ACDDD
C00930BE447FB2321C2CF00F8C865E3B64BE76B313F2C3E279C4E31695A336BD
F072E53137965FD1A298B092DE1D7E9F6F84076027621490E5EFDC8724EA3905
EF88B9D637A568C615AC057A795976B7AAAB03D45EC35C2A6713294E13C1A465
9EF0FAA08F3AC214DA61AC678459EA0DFDAF09E411A8EEC5B53ADDEDB640CFC4
226ED2922D6FD4BAA40BF4F7C38152DDAAD042C74BCD306B02F42B2EF6107D61
9D84375B74D3C14D22CA2A02DD781F1C8B62B7004248C626E644245123B42AB8
0069FCBBD7D87CD0BB4FEFD29E6344D9F3015068742D7E557DB2221EAED4345F
C7B767DB6D3403AA07329268F441F867393F94C6D0B1F3350DE3A8E6BBE95FF9
D6AC6F90945468DA3FCFFE5FA60F8F48E252DF4C9BC1D95C4F2E8904F0ED5552
EC845BE486ACD772DA0F5B5B73CE2BB463D1FC30CFB052316D4D96D7D0636C61
A842A62CADC1B1D3CD210408AAF96AF65DE1E9830AC1A4C0C342785F9CD86251
6F2709842179ABEEC43401B8754523EEDB78CDE4A28EF2F90E9FD509C3772B45
8F9FEC4D3ED8EAA5E7A70642947F3881138AD5B484A1D26323E23AD6C738AE62
A7C42F406C3FD293CC4369BF4E18720AE03F987529DF236C6EB7F51726A76F60
D085F0A2BBAA3941BAD899AFC4C8948995F6F36A31FCE3D8326E652EC850FFE3
F7E590F56EF6CF5119DDA9E3BF98BE1CB7DA81FA9C149F6A812016384F6546C8
958E0CD7929CAF7E79D9015D88E4B7CE8F110BC23366F7FBAF39D5E8D18A56D8
A703B4F469068B96F408F072DD0FACD7EC6BBCDB14DB76BA43045EAF35E083A0
053B7B6BE316D3390FBDEFE06B4A18AA51CBFDEB1CD2BD7A8C3310AB2CAAA5C8
1C956ED1A9AC8C213E36345EBA26CD8CA17FF178B705D8B537D15C66B6C007BD
AA2312D2AE52BC1DED5C1A520B1B67BB5D66808475EA78BE48EFB2D13C855D11
E081D3B0B0BBD81152098226B683086C2D9EC33A23DA4B7ED5551A351C2DE742
74EC802B4C8C41D6530335C1100236C1EE4D7321A358CDB75221EDC4583BDF87
B5ABD1B9C06A2B23E10A5B934A0857AF4145EF3BB6F0CE9437431B1A29277072
846F1570C10B4B48F66BD2C2CCA9FED9A12A913A7E22849205FA72819586351A
543F10F123CCEE639DB1E8DF27298237B2CDC39081E369B6ED90BA08D8A661B6
D2CB8DCEC72F3B60508154B0BB2844FBA682857FB0F0B06375EAC3C32B415E96
6C9E402D0FC042A7DFDBADA6C881A3AD27D3C5652733E726A5AE326CFD97F399
6D6F541B5FA96862D6E547FB8DEE828BADC3C9752A1C682697AA52EC5F286AE6
4EC7ACB0196673DA699C482AB4049108E2D924FB26CE1209DD13BB4A5F32DDAA
06F9591520249698A92CC011E458D64A6C412F3B4A92CC4FD0A311587AF69746
BF9282B91F5842FCD0D43498ADFDFBA62DA37C733BDD4A19E976C087320CDF22
C3F14830361C8115DCB0EB88DC7864AA14E60188B8B7CE69E93B30BCC7B4CBBB
060A0F1F939111459A467DC654770E2A8D81BD746AD5E371AF17763E66FAADF1
FAC6DA722ECF8D7A35435C2C2AE0B233E524296240CDED56931FF5F38732CEB0
53DC8EB5D2745F67BE939048817AE1569E2D53B6DB3825AB1EBC214D49E3A411
C6D3CEBD747AFF254A83839F08E7629133B80573225EE1716186D33ABD23B724
B353CB5840DD8BCA681438E8E758E39D049C6BD28C248A3BF522FC0EAD86A52F
F228A4E253493D6BBC92804715D20B18E96F622C32ED8C17CB4DB44DAB8F3207
29FD0FA9D6F0361E5273C196D8618F8599E1B437D934C508467CFAC4801C85CB
219AD22C6E44A4AC7A720442F9D9828AD571BB3381F20F7E908294101C4762D9
ED876DA714D917F4EF0A26AEFD062073633C7126AD5785191393325E914CEF93
22DF0CCEBDCDD341E13F847138A6A423B8FD3A94C45174899A81A2601C1CE1C5
F3C6C12B31FC7F5E6CE9C732AAA4AE3F2C72C23DDA30E3463138F5B8BC14CA70
AEA97FC6C5FD910F7FFF8580F0D37FB0F8D493133C1342D79FE440B263D9A2A6
B273ADBFD86DEEC1ED4389868CDD131FA793AE305346637E9787C21146D045F3
C5D5F98FEA3576D093B9767A08C5A8457952DFBEF79D2A4E29B377E1BC9AE275
24BC50D349A06D320087FF46024B75C00EED07FD839E5B79B6895AC4FD8D148B
4CD45681D000A84C395715DE7E2D6A6208054C500BC1176309C80356E77F8918
F1FAE9AADFDEBA31C33AADFF14981FED9E9CB1F6493AC630D3B66A931E29D3C9
3477C064AA88C397A171AE411742EF7B4DF93B42FF7B6AD8021C5DD8ACD4F06C
006A2F14F63230B60B042A03695DA4EFDFCE608FBFC22689B2ED8D0ECA8FB3D3
856C3EE6FC191238B6B92693BFF885F2D85612B333E8C4EC2E14CE66E45A6DF7
9AF8CE9F9C8CC4A09DB02E01ABA51BF162469A410D262B1E5BBCAA3556A0B7C6
FCA9756CBCA63BE9AF767D10A3431A5766564095FE10C7F822B4435D586A0530
C4BBA4C2467B2D8BE9D26A8C390F48CA372C2BD3FE17243D598C773D624FEC30
3A6413D2C196EDC409CBA54265C701C6EB4C3F86855B69441D6B4F8D951808E1
4BB5496F8B274435E4EBFD3A64752D4F63B8C79A2E8DF3DC3FE61BB00507D30F
131BFD942B2208427DB4CCC5B3DA8C55A5A47566EC9268E09F3559B4A6DDFC50
904F48B86524F187D45FF579635A8C2158A7A643AF6604197E34B6C89806A8AD
9D5E96919B7AD2B5040B29D054723AE031725FD59262CD428804E42A0B9804B8
EA888FB93D652992E8A0DD5935BEB318B2F7841CF540694CBDA787122A026C89
23C71F326A7FD93EC3100D19E381C6C1226569B2551E339DC204EC9D85704964
EE4C15A043775B6C2605BF8FCF830B1D610419F1E65C2CF5F54B4FAC7883F6D4
4CED146E9F5E180F052A92F07F54666B49CD80B51A922C2042ABFD32FEA512CC
409CF422CA14356E753353FA320F9042E843FA1EEA938A98F10D73D8E80265BE
28A250B8108419933C332F6B5769647EBF046E42D6D57A331CD66B4A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1347
5032244BBF28FE2CA38708508E316AEF2FEBF2848A80D0618096592CB736E082
DFCA19B9947358DF9C93B7D57632623F60D71336E805AB57A39611319ADF6A0D
1E7495DEDF4C7D14E368E65381615A49FC4459C2679B05EBAB7ADD6FD0482536
0DB2BA97346DA597E2A731A4F2A3B1180394BE026A48FC4717F1B6C99C705CD3
DEBC0D0847C53F2BA063C6947A75B55B91335200433D779006EB64DD32DDC3A1
540B30F28B840663FAE2E26DC36DB9A1F875058E66CB0FB03FCA8F6F19DB4EDE
F210D0EA98CB9434E3F7580B363B116174B7469E6D3F5699085080E8FC9A14ED
7F8ABBF3825CAC60368D05EC11852913C5BF793AF9336173B74337E99C672DFA
AF369F2AB531944E21B4798087F2B701B79E0DA342BBD6460F3933653B2701FD
B0FFF9055108F047D8FA273D40D06AC049BE4FFEC8131AC2067FA09A5F4C1D48
6D4F59FC0DFE6CDAFEE3D3B5A8DA1B4F9E81E77C95E63833E9A68B9B83487180
05F7C6AA6CC77CBABD46E74EE8BD03E7D068B51E7C80FE2DA91DF09A7B362D7C
8C858F98FA558F772B948D92BB15AE5CEDB499596B2FA6E37EFEF2FA0F2E7EBD
517C75CE2B6171EA3FB1118FD1A2803E69584C0BB14005FB893CBE5DB71B2971
DBFDB417A159D97F5F6C08828D7CF593FCBC24C0033AE978E268E3FF8E60C3B8
991F78573439609B3A3D2AA5F4AE5ADDEB0E8EE99A4A68AAFD65EA43C1406E1F
41C5150C71BBA59E918E4FA3596464160CC708232FAAA0513EA98D112379C8DE
111943B874CFB4B611D26EBF753DBC8BA0C569C7EF33CBF22FD7430F86A6D009
63D2F0B2A939C424449F02B48F1A9018CCD9781047D40D20D573D3E4A1557658
56F9C68891E3A76734F25D3AC9AAD7EF8F546551F93A014C516C949E968BB153
024818C47BD88E49686B638A8D4C46BC2665D96A80F79FDE5123C540750975DE
F46A74D33E8E794CB441B2B9970705FF8A83B68B75BB696B38FAD7705D8DC604
5184E81C83C06B2341ADDBC6686F1EE4C13CAAC3673796F6F20F51E09981A46F
7A083A74742E895CB9994F56D69D6EDC87AD443D307D28C9FFD6BC99035A5877
FD00B41BF72AC458E20DF439C56DF1727F5D50F3C73B52C528B2A64B8980F801
7A84BA6BCE39449DF4A65BFDE2B23DFE4F6623F737A0D08ED3223A6D26B84839
459F71E936A1C3CCD41ED86AE809F8A6677FCF4E1591F9312EA7D1761BD80997
F8A4BB936F109D947A6C8A2972DEA85D9F8C77DF86EE890025CF79E2E9757F3C
67BD8530DC9CDE44EE4CC83176CE2FF52392A0F15667B1730C0D64D443DFE7C4
E523A620397B3E1CD918B957A9E69DF5DA27B164A6E78CB8DEEB35FFC55D5772
793D1D0C4D8ECA4318D681BA7097EF0C91854FC3F7AE20B21C94594116E0EB9F
B4B29D8B0DC6D0A1B332211482E41D9E8C6A1A0D3CC770586399DDB20E51F6E1
F85186394E0A1566C1D75155E20BBC618A937C416B170067B51D02FE4B1914EE
325C4E41D608F8948C0FE4561A01DA2F7AE66707D3BE20D5795B41C86F56DE0C
04E64EC1BD070AEEDD50B3D8CBD6A0908BE582B050E80E013A5B33FDF8977888
0C3CE4E0B9A50391CD5F49299A02D792519BBDC4F2D227B79BCC6581024CE328
DB46A9804676DFCF5AA362A0027CB712C1049FD2FE6A201FDA73ED52156C0724
B7ECBCC9EB81E95437EFF50D619D9A44FD882E691C3D7264327A0C08ABF25FF6
99D8712BC2B133510CB723392E3F9EB0E25EF333A7E2CE494C712C5167CA6DC9
DCFE978698D5F61532650D0B4FECB6022CF59825D71AE9B1A5781370C8BFEB3F
5BC0FE45847593275FF357D9191B8846C3FFD90935690C9D5A420CD6821433C6
0B47EF3D677036CC9A304FD0F75CFB4C451D34B0737210208F39F60D45D10270
5E753E307CC0561A848490404DD012BC8E21B52748414FC96496F8598B1E7C4A
23B47DE5D3C0CB620B9907E39B68AA6FB9A2AE14CF63A8F3E79EACD5F11C4B36
E9D2612AA4865E4A6858F421692CBC816547877EB1F3A303B15E305334C128F2
4D366E0822B478AC4131EA3722C0AB27AA731EE7455CCC4EE27552546BC4F26B
8A31A19A5E70C4C2F1ED2F77B75562F3D48656884BE6829AA470AA92193462DE
40EBDC6D0CEE96BA65BF8513C1B4CE2928CF3C121129ADD3AE0395E7C377BD6A
A9854656AFA604C3D8596330893FBF6F08C557EA7D6D6EC34CA66C048D94DA58
64148DF2D777D662A7F38B30D840A907A65E0EF0CFB343754E926E082184D255
DAAB15D261A347C0CBC91BC050537FE9888870DB22CBA2D2E01478881F66D755
A8033A407C9EFD258C8DAA3A5889CA429749C5877FB95199B81639B3024B7847
DB76AD12743DC4B04FE1543BC4E8C021124E3CEFD7E41EC10E5EE71BB3C20A0F
B0FBBF7D2C5DEE64587E714464A7041962610F2F0FEC2B8AC5B04DC9A93B3F4A
D94901E7D1914294FF232FADD8CB00FF10E84B6422F969442F07B4405639C918
7CF78E246AFA8AD479CA4E936090BE8A01C73A3FE5123E303BBDB10F168BF728
2495CBAA9D2747040899FF3AB5905682149BAE5674FAF4F5F0BC9561ECA0C14C
DCF9F304AF380DE4997C5A7CF6744B7827EB1CA268E296DD3E74E0ED5AF1FB20
3F734B9FB381A80C3543AA94AB29F2A8053108EEA89E32989EC3F0B5DD239111
BC0C865445EDBA2C9F42A630D56C817C0BDE4C69A4A7170F95D6191F328A0902
CD1FE6403FE35D5AEDA6D674DF126856114D0FF9CB85417AAB74D8BCA60937CD
03834356A67A055EE8161CD2C4E792D5F6A392522739D920F7EB1FAE5E329BA4
71C6BE51A9C94DAE211CF9648491ECBE70E4C8F4771106BCEDED570796220FC2
B933D71ADEFCFABD9D7495D9E1AD243E57512495CD732C3111B6CAD18FB123C1
C8AA9034FB61EB806D1AC03034F727DDAB551ABCE205DADF6DD7BC4F4D1FC109
D696F930ADDBB994E1887E1DB52B9433D8898043868658FF2F770072AA303D33
D575FA1862E4277F7BC5B4A9737CA33AB95CE02D75BD1D12C24B426C4226B594
F2C3BBAC2A4E3E66EEDB3379A7B2263538A0CC45F284E251D1C14862F5B9D7E2
2A51AB446DE4B025F225EF5CB906A6AC9AA63C2672DDAF41BCCD590D09386831
332C695553DB3F71F0EA14E49F75EC083CEA167C8E65B349B69EED368CFA2F39
E2BF7BADF843FFCF5B4B8376C0C328F44E8D61C0988726A31D7C11EE0FAB43A7
0A2E131CA22ABAF75E54941AFD0B102C6A0932C602F3939FBEF8523676B76258
726C1DE834C3F1388EFA6CB89A6424208720BAA441DC9D15ADF1C827AF4957B4
38BF6D9816FFA0795B495AA9C0A318B61AF4FBB1B5B1FCC27560074CD79B3CE5
E9924418E1CDE5003D20E6345C6AB91921B90C2B185D5F501749EDE142E657E5
E6F1AB98E7230F59A3B587ECEB87AD74EA12107A8B5A731BF732BBB690BD4E1B
A25E5A4C4B9B43B9604E75171281D4F0856B8DDB4AC917D7861940EE4E042019
BC85159520ADF4EBAB73776E794220B791DB65F0E081852C775C2952FA8609D2
E30A797F9516B13DD1327E54958A52992D407177ABD6009F46D5C00EEF5C5736
9A57F0B9ECD1A258B0E7B321F85324AA02350D910CA61F5B4984FB49045A57D4
208A38CCD44404D3BF5CB3D9FCB29E793C5D6ED62F1127C0B70BCD2047B5329F
DE27A82AF8C847C84253F5C86A27746CE2536EBC2DF18520C86966C36A1DE478
2CC876266C42E9F158122A3C4CB44D5E4AE05405BEC2EBF15625947798B69FF4
C335B96D56DFE0D78340643330692EB2893130ACA9883058B000B48C2CF4EC06
5BC26E96C4085EEA103344ED886A162D1D7A306DA642B6C8A2FA32F58C15FBDD
5D360181D708B1BD1025C041074DFF521015AF245D194DC2C8853BB3E2B92389
521AC5140AEA26015383C8D40CEBA3FA90A30AECDE70F0AB8654DFCBAD9EA901
7978F14D1AEFB4E88DE716B03573C99A0999B940D7B33C511CEB1DBE4962AE83
218765BB9B9EB98E201A05AA076DA15AF380E69373CBF082A6FAE822D4A177BD
6E221B02B0A538714D920715A0FC7103DC4FF7AE7BD00595724B00455D49A99A
EC0678BB188D37B7EF315FEAF1B7B910D78F0AB905D5F7EFFC04BC28FCF73154
DBDA49C6C7C9CF51589BD350F69E62ABECD185131281335F7086B66553062C0D
763EF3AABB121CA15439029A4189E4FC839C0E9D2DB6D1B8E19C68C13E2D2D1A
DE17E43F8468FF98DE245FB8EB0A56D39594DA116953F1416C45FB8817A29A4C
787BF78624E191DBF0A0E08D087C4FED8810BD365A99F92B4D96DB412E6DDD0A
220076A1D821D6DB1C52A71266F35A1D775D9AA9B45DD69A8C873C57FB4D4E0E
B776F6A58C2D6312EC02FC8131416285CE37FB5511AC429977FAC1C845A068E7
AF13A1035A31D8AB22E27BD7171FDE19B2728B3D5C8945AAF7238E6D84E8A131
070DE3741576C55FB467E2F3B08AC384C675B4F308A071A6A7923A5125CC8749
B07D79C458EA9F7E98298BEF561152F81D2979604965F7E4ED71B03BB3AE1CD5
057F44D52C2953E139692FAD31E3C7CF99345C1B63E7A29D362D83F98DFC652F
AE8F058B883E9DCABC4A47C0DA91234E3798CBF687F40F33CE291725F150870C
1B21E2185F98E6A8E8249D19DA0E215A3696EA746AA0E2543FC2A199D39C2CD8
3E1905A4B34CE31DC252214E944FBA0E66BEFD41F5947DD11CAD7D62C98AC233
A6E65D6608324ED1CE78B7A1BBBEC8D308A88228B1F44C73DA5FA01E47A504DD
6F46BC839728094CBED95E1E0BBAED207BDDE153C72C1B409A81B03924EFA75F
C55E464E8808BDF0AFF82BBC49F582F5929D4F12642CEB09E83D3E036A99EF88
C30DA67D0C278CD2EEE9E7AFA787F13F130AE58340C40C2416CFD4869F5BFCDA
18AD088BC7191A43C74C3D1F7A1D9EB1B4871A83DD306A300D6074771B1D83CB
37FCCC342270679A62DD34AE601AB378DCE32B2306CB4FD7C810CB9C611D2C60
B2898E52F22948A9B803498A46C2E3E467BEA9BBE6179AFBDC82C3C8FED009A6
E89A41C2E6795E234528B3D5F78A6F1810C01B9B851B8522B71ECB5F7DA6543D
B5E4CC2C47C551AB880F2052103EF9BDDA9448280CE7A398A633DCF488AC5D30
AC881D8637EAE8FFFD8519CFF9545871266E5B958C89EE9346F94167C60BF4CA
B21566E8BFC9DA95CA50380D93B0C11EBAE00C8D90D1E8539850BB3AE2DAD823
E3575DAE9F7E1E559F1C974FC3B57CFFED02E3251BE2E08E3664B7D51FF13A63
E5883BFC1905DA6923F90DD9120F4D170F1FB162E0F9CF61EE0E9D17BBB1063B
0602595A3E4D3513E57614EFCABF8C30FE2C3210AFC925E515EB39631F22F0B4
61336C2AD725A4FD53449F05D84934498C838848058B25D865380CA3B05D6DD9
81F91D77F997EDAE05CF60692F247227BC129D7374262D7729B2DD7729C3CD32
B812A666A7462E85816EF9DF60D8ACAD190CB950D0E91EDAC63066712D2D4501
884BC744D35A5FFAA4E16B4A792BC722E75EFBC5BE46D6B96F130BE08DA99B91
A25A01393121F743EDD9169DC9FCFB09370239122D035744990A0284A88C7586
0C8EB02498F94BFB42344DB05C7D75B13808B251270944DB64DC27BD34EDDDE0
5DC719ECA4D876794EF6D6320109962CF596FD49B820DF0A6D3A0C79773A6255
5FD57DFD51557CD0E2104540D1BFC0A5DB12A5EEDC40B7A9878C8F3509B2C135
E8F2B50D01107874E7DB593866C9BB07EEE8B933E56101D1CFE2C08C4C679CE7
7303559EC5765A12BDAEEBD77F4DF7C38BE2F427D339D1DC6DD1F83FA50F223B
41DEAED3CE4A1A197E2A9809C5FE46C75BA73E0D5126E1E72AB540759EE9B3BE
D76670E3F30CBA547A166DA46516AD20BEBF01FD780E3B2EDD2479BDB8117AE0
1F15CD43EA398227363F52A78D343063014B23A5AA4BDFB2E43082D35617129E
9FE841F0256A91A772EB77B4990498362E5DFF8D685ED8C783F4104E3F976A8D
146AC58C4F948986B1F83CCE1C184163D33C174F992E9E2263E440A719CD8CF4
93676DE5025EA1A43495FC5CD4F1455DBC3E902F1805B3E415E941133290045E
BD985895B76C162F6AB5C079D5A6DCF0A0DDF2EECA669BDCDF109071C246A957
036BF27C1BBD00D9719849B216C560DBC0D4942E63A76E5B77BD024062D57D47
A7FAE73E095BF64D60B2CE8882889DDEB599AFD584BC62EA4D0A2E3CE3DFAD45
0A63FFBCAC6C6A64F8C00D6E75788B2AC966FD58535F8DF45EF98B7A513E1611
F06CA32B3C4F6D1ABE5857F22DDA6A19ACD254E53B726162FD317E777EE1EDDB
98DE61DE5482DCE37B22F12C1240C57540D5EA78FB55C05A5B934CD6E2A68EF8
DA9CC4B7F1ADE6305BED5E3FA4853CFCBA6F15BB8D332D0BCCD1045F30A29CFE
A10E85D4D245F8DCFB2CD9A82C230C5BFCFDAED96DCD65614AF95F8B579C0535
49A93053830CC75242CB2E3D0A5CD96D9C06D5F14479D008ABE5D6106E398019
19E7008D94A9ED738FD30EBFD8E947A08E8D7E1FD0425DF1AEAE7FA8790ABFC1
BAD9D79E31BBF79938BA648ED3F21BA9BFBA982C1AD13479B6252D4F20BE1AA3
2FDBF2E95D82BBFA8F1322A680977694A27CF34DAA09281379CEA97477381AE4
2D708DCA977B036E69FAE6556D9439FFCB4C2EADE01F1DC119C09A0CE284E2C3
84E60274B7EA6FF67FB1977AF91A8FB37E1281E36FF21855016F9AC6FEA57D50
A9ECC6E0369FBB3907097FD03EEF1311EEE84D0D1410A9544000074F8ACF0090
AF9A5B3ADD15490079815C203233222F1F99A781BA93CF8ABE34CB2482450357
0125A657200C1D2C60144C391E967CF47ACBA52FAC53056DFA5F6BB1825FD21B
301473C522CDF770BB77CE931042155BE10F0EAA0AA17AD20C60BED2DD1BC981
72D7D2565B25C9DBFC269615759069A760D44D5B356AE01C55CABC65E59B91E2
25AF3230D72F4DC185610905562E92665991CA44D4B189A5338E22402A30C811
0004057BF9DF43091A3A1147BB504664F9F6AD7827FA91ED654B75973E3D99DB
DB416F62F742698DEE8F542A42078E4A483D4AE5CC0E55B44F9D99050D44FF84
6625D4B99FA73EFA6CA39EA54E6880ED47FB20BCB2E11A6248C44ACEBCF47A3F
58F529B5A022AC361B541891B78E0D1B95448ED2924D97B20CE477C46CAE234A
46B51F89B0AF49A25DBE9B368B12D359EDDC53A47FFDD7D89444C11FFAFF5C24
781C3CBE645A0F19EB7835FA1C6CF6E232E74103CE5C216EB6C3A6204E869461
2A7790EC610402E7F683C22A3CDE0856BDB422028061F5D30B9707DBBACC5663
22C4D6231EFE22AEFB771050057DC7E9C271A04517D059958DB2A935A278F716
A9314B402B67033044BD8B3D7488FA31B506F4B5E57FE4BB56F3FBB29906CF11
24A4E0DF06208281FEEDE824555C424DEF92008CE0AC08ADC3137FAA0B7567E0
2487025AE6DED6C96B3FE91D12AE88B364EDA6CE61D2C7A120C63668B6C9C577
866D63ED41E6FF549C179AA9982609A3838BD170C275B9F1AC03E509E4E648FF
85A033B73EDFD53261CF7652215E67170675CB21F2A5C1AFF3DDAF2E868AACF3
229C175D0435404EF38F12B074531D2A095BA243738C7FAAAC07A01CC3FC3CE6
3D8A3C378BD90F5D6B4647EC18CEAF68679A415473B4B5EEA3039CCD0D0B8F1E
ECD7ED6431AFE7A93373016B77A11893EF1E9B698729A6341419C2086D160309
617854264999321715A18BF8450D9018CFA0C24F6C63DADDCDD47E95121E1FD0
C5840EC2BBCB56D26355F70AF396329F51AD395DA0DC9047DDA4E7E551EEEDB4
189E5E57BDA112AC090E2689DBE057E37B3202ED63F07AD8AC017D616D0B540D
DB114635DF3C44036215A399D0EDDEBDC00BB737CF2E7A04C66DE6F8ED252EAB
A0627002DF795CD6CFE64AA720B9EDE57E95AD4470DDF690C2078EE16F7F43CB
FE9F2AD40AEA1F884939C5945375BBE9CD63AA3CF9B4F1B0917B6509297915E7
5FB8B0A4CFA5EED55254790F3A7CF276290101AF7E772A1DE929B93AB238367A
14F0DF0E29D2F08BB62F3F471B9B8037662BB23D7704D4D39BB31C292004553F
A07E529C86EED9E4E5B5370ADEA0BFD5C81EC4F9C0432D4A076B30AACB6D18A2
5A4AF59181645576DCA74159D69FAAB0CD741F65658453E65BF412ED4CDD41D5
C18F91BFCEEE576D4111DBCF8D889D05418EB8CC53823F3047D0BFCD31833B1E
DEBCCCB29902034D6989A98BA6E020B1DB4E2202A86598B144BC6FC61C17E1BB
376CFD75DEEA0C73666D20E6C47A9BE1E2C051359CF179FFC6DCED448D1588CF
C852F9D90DBDF863DB4ADBCEF830979EBCCB7CDDB5BE6BABA56EB73899BE0709
8AC25F6CB780E69545647FB63811D11D4F6ADA26F8AD14F5B41E84F1DAFA6DC2
89C854F743B5C42331D6CF74E95D68E3C7CB1D78FF32AB9F4CCFF3DA048F2799
89482EAB2DA6DFAEC7408077B9CAC35CAF8A465545D1A8404E0245B8A15A8159
5D04920474A7ED0BDB5AA2443C00042C681FD12F97E36F3B4D25FD8EDA81788D
8F1B954211AF0A0A6587B52BDA261DBC2602E2296B8A8917FFC77B69E7E6683F
ADB4A6094C87FC5D8FC06BCDDE43D2EE0AC0D98A422438DFE5A3E60528B586E6
4177D18907705CF14B4944F270A5D82E2AD1E95B7F19614B32D3110D66A9202C
67CD36DBD7C140EA8BD8AC1E8FC11E22421C03761D9DAD1DF1657C5EC8101DD2
A688183420CE164D50C910B9FC90E186CC334C2C16C60A4341B5373760EE57E2
9A198E26AEABBB713522A4B260C55A03E9459AF2DD2AE652FAF929685C6FAA5F
9EB92ECA3224261089F5EA43E2E45DEF49A4AB1588E1268772021CB09843818D
589FF6EEC8EB83AA5E8605775780B1803BD635C05E1C0638DF6989B771336969
FEA32B5EDAC6F065BB64B6AA54D81613C219C7BC2BBF0DB097E75AAA56FACE49
02F8B4A11DC5A7318D534F3195564960A2A7AC958F3317BE55FC84CD3194B236
03C810F91490918F6A7076CA31D19E37E4773B561C6E0C7368C5E731D4925542
8FB9410ECD1635CCE3A8B30CC8AD97D8532F58D7F8600D90AA5188BAFEF6AE18
E3C94FE80AA65B3397BAC93519F856681561CDC8F45FDB5AE7905781B6412452
DE9165BEA31B1EC7036EF7F50AE117B01569FBBBF1608D228D6526D50E598721
B81AF837A0A83358092053DCCBB96F020FD14915EDB6BC86825F09115877EFD3
10D8FA0786B28FAFE35A96FA3215DBEBBB22F94D9F7F5AD1D3F7F34C74BE08F7
C1CAEE3DB1CE2025F15E4F04921CCFA16F0DFF8BB01B2C6F4557D658E164A730
A7D53A4021CFFA1796FA4C467941681908BA95A2ED60738B460CC66BC84F566E
8880D5DB9A996477D8D60C63104ADFEAEB4C4C59CA01612597D739B975576035
9E92F6E5F4982BC114D1424B7E327B0981702A2CD82145BDFB969DE172052D4F
8392709C911FF9898FDC6A46178EC6036DE85C4F6D51061E81EA9362DEF2A031
125B61B6BEBC9C780017684A98893E3595773644577A861C73E2B61854A07D5D
3EDF4D2AA6A09E32E05FBD2D2D8A9955EBC6876C5923B6D4FC2862BE4DC8DBF2
5C984C31693283ED0A777D023E10A4B31B29DCAA3B60393C8FEABCD908C8A610
59B228CF88D6B87D9DB931ECC5232BC688FF780E752C4FEA30EB367961CB6878
4C5B06EE8D5BC09B1253748B539014942319CCD54334DD54EA7E9664226DBB6F
11439B3DF196373717647DD54323C75103A6B0AAF8F5F9C5EF59A3C0DC7C0544
A82E27D3BB8006F056F29496A1755CAE67E5661DDFBE9B32E296447F7F934EDC
C2FD5D15F53B63989071FC99783A4CD1AF6C638EF57C844F5300D7FFAA6C15DB
D7880AB8224C48E5BDC0104A252260FB1192FE81AA2197BA3C3529050AA9608B
7826A5D02469FA48479F7076D5C3CF77526FF59FCF1208F9C7E9B5DBDBFE399A
F19B0F918C9EFF269C7CD93331FF3001E24376B8621561E6A89CAA2772161705
E23ABF87EC5FB813FD16F43427280DB9C56C4F5670871E4B60DE41EF33D81C52
559969CC408705ED236C4AD7C698D28AC0D484E5E3A7DAFC843F9B3B6369EA5C
4EECC58AC524F84A674BF56CF9DD7FCE413A399ECC675E6A0DF27D7DB0E6FB97
E9580C5338EC12497664B563B82357BC5302AE3B526DCF28A6675A0E800280E2
32C2C188ADF911353EE42C1C2AB7127274C760EE3E8EBC26F9357A68A158BCE4
ABEC88922B49E906382A82EF490093D4857290DC12E45BD57DCA35CE04B93077
2A4D52FD6C8682CED47291AAEB8342BD565CBA9F47D59126AE073DD86F0444B6
6FFDF567FC6D3BC56666646FB97FB5A04FD11C874C4510FB25A526C6790DA9A6
B6B38AC48919AFEEF2FE6F7DD18CEDBFCB4EC3F62D26DA961E33C4F153BF9408
333AECB1F931B26525D173F04834B8BD54150283FEB1A20E7C50F3A0B7F152A9
EAFF6ABE19A3BBC4BA3B7BA382D6F369558534CCE31AD527E221050F3699BF7D
C0FBE7765EFE0AB5E8991600EA075411E63B16E77CD65AE2949BAB0B9E7F0086
6548410923051FB515FCE4DA65A31A6573B271229C7767726BD5568FDCF13104
AD668857FF5E8BE3D9853D4181C84D03DED1B24FFD726EAAE57B3C9F88C7D857
98CBABA31D13C70851E3FED1B2AD4DACF528DDF166DD5946B5A98A1F04A1CD03
D6034FA94C1D3BA979457084AFC20E31411F735CB17871BBC0539B35E9306299
CE23E041AC3E356E674F15D8DAE4DECB82EB7F741FC035D3D04DA7FE612FEDB0
BE6695432BED9678F4D4226C556BD332B438E0AAF93DB7C5515A98A04EA67FB6
44106379F017C69953B25B01053ECEF3F3A4F84688FC9FE83ADFAE8443D48244
ECD493F41070906EF3062ED6D67AB078D7E19B45E540774BAE14B551B761FB36
46877CD88E4CF0C554D054BD14063917B0C8E6AFC6FF326450FE1EFEA907D47F
AB08D5BEE7E97DCF9FBF3D97780F6A57161797E9F2ED63EF0CFA1145013201B0
D65B134B7827943F0C0A6B0347B96D3D028D049589458FF942B306B75F92C8E0
D21E921DD70D84341F45C99C83AA5843B98CC5A487492469E9357AF1ED9C62C1
1D22ABB0D9522D875A5B3D173922C40F4EBD6FA817AA56D34C005DA81B25B1C1
129C7A68E01AA86F2F9F102095F10D6A20A01BBA1D6D38CC61645247A505D736
661CAD8A8DB8887192084C9B782B5945F71B7D76B828B74DB6F307768DFD8048
56CDD487B19DD93C8023711C416010BC1EF07B34924985020E963D2C3C56CF45
3EA7C218405583172294EF8548DE062D2CA3B1702A1EFD544C4B218F94EE4176
4D7E768764F926368F19EC8F14D506E8FC3890A2FC7E151BEACD5FDDE3C146C1
2D0904827029B55BEF2F1F3F5DA8E9F3EA87EBAAB72B973719
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MathDesign-UT-Regular-Italic-MathItalic-10
%!PS-AdobeFont-1.0: MathDesign-UT-Regular-Italic-MathItalic-10 2.0
%%CreationDate: Thu, 29 Aug 2013 17:19:42
9 dict begin
/FontInfo 10 dict dup begin
/Version (2.0) readonly def
/Notice ((c) 2004 Paul Pichaureau, under the gpl licence.) readonly def
/FullName (MathDesign UT Regular Italic MathItalic 10) readonly def
/FamilyName (MathDesign-UT) readonly def
/Weight (Regular) readonly def
/ItalicAngle 13 def
/IsFixedPitch false def
/UnderlinePosition -98 def
/UnderlineThickness 54 def
end readonly def
/FontName /MathDesign-UT-Regular-Italic-MathItalic-10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 126 /vector put
readonly def
/PaintType 0 def
/StrokeWidth 1 def
/FontType 1 def
/FontMatrix [0.001000 0.000000 0.000000 0.001000 0.000000 0.000000] readonly def
/FontBBox {-3 -270 937 812} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC4458BEF7EB4BF9CA685821DAAAEB8ADF
892F4EB5CC669C655007A1C4B5E91678CDCF7A89B25FB0FB53FF6D3A61CB7231
A1EFBC7D17D40265074C7528E4523FC36BDBE32CF0CCDB6D3AAB064540916BBB
F6400E79B0D769C1CFC9F219BDE40F7AFE53D3C15AD879B51CD0D19A11160BFE
160278724512B082FF8FD28F8D9D5D0739CFB0CFB691F56358EDE43F651287EA
2411E5C5693CCAAD08519246A1F7394606CCEA24B236F7389B7D1C0A145B2B27
8B8164EC28B4918DCF9E6E0FC49DC78B2AE89E16DA653699D40DE1F0DFEAA4DB
C957D6BBBEE07447EDEECE4A3689F7720EE23671435A1C1D82F23BD5587B9DB3
AC110362CC6665FD7FA33C641EE341D03E26069AC4CF8B85D1C5A8A88BD6C39B
B597652F5C7A17BC5A9F4AF1334BD70CE6A024BCA046D56C4FB016E496E61D7E
1BB68A60F154396356BC489895CE5A542ACB571DD7A4C166BC9C7D037D6BC230
991C52D228846579F6D8A381E29C19756D897E7129BEBD105C9AD54105342CF5
F95E94965CF20A927043A65A738BC0315FF35E50EFC02BDC1F2F7AEE713B18E5
3C433C677B0B85D873B451E3D1D4AA587B3BDD3C075CF94C432A562E70DC710C
6838EB8B0BF48551C3A1448E204949C55FEE530AF89EF9B71FC8C6353C8F2E3E
12C8E75B5999E7D47A2655C60D837813D74D12E3C404A3915BDCF76FF8C65368
40CB7E79CDBDBCE835622D79A11AA8A3561C9F7B2DB496FEE8D37E699CE7F8D8
1C62E53734D3DE04C97E4714F79E49631EEBC6A1151C7C39CEF6CF50537B7474
2D1EE2B0C2E5A00C72C850454AAD08BF25A4A00AD991B103121FCB9B40159766
8E569EF2BCFED6063C84123728E8A13D0965F6E6EE4EDD6488F4723DD103EA74
73B4DDFF7313875FFA80340451307C064731ED57C4DB71706540A8254A807B50
300F114C2C8493A5F3CA4D52AFF8A21806F46A62DFB701217F93DB311516654D
3EF38E522E68E693DD85EE8A038A41DF9C8C2F5F07C5CC7507C30D8B8563A32D
93697A52C9CF58B48246F36271832E76BD6EE0D66312E4E5A725DFC659289832
1E7F07EFC2815EDD280E8436DE096E17C1B218392D317A16FC8EFF644EBC887A
A36617B8DD7AA0C4245E3B5A17C23870D845F195F5AAF58E4392C3A628128010
A8EB407346256DDFE0CCC118892D5F68845ED3C7975D7BBEA2841F1492D4E702
B00227ABF74A227578BED8CD171EC50B2AF8B5D96159B5FBD7E0BC3E689A7D3D
75A59BAF86E14FD743DA48BDD87DC466D26DABC89A8F0F3376F68A0C4DA8C2AE
04EB142AEF8D14126F3577E87ADE93EA3DBF177CE6E0FC453B90FEA4A2EDA9F8
F57AEA3AE6C833145548B86A278023E56BEEA38DB1086687E740D8095E63F70C
AAEF65D1E7C9B77E5B2A6D1CBEBABD0FB851D058D16AC824EB99FD9D6605C475
0A869042E5DF3D55605F332226D65BECFBE516A6DECC67B70DAC2A775DD60294
5ED891A7C9277C0D8B0BA604DED56D0609BC02A3B6D2C21F8B7EDADE382F1E0E
02F5AC3B59F8F10191C969ED22C120F1CFFCC0E312A205953FD7B8F27B76F2D6
0166EE18C8AAA33FCFA22C0A4A6AAD1D54AAE756DD3AD70199E0D834940E16A2
F88584BBDA4F5589085E9D77BAF09BA6630E749A6E3AA9964E408114D44CE910
5610BA1DCFF9A9B0B5877782A5368111218D1F91E20035A9076FE75C295F80F9
B93623DFE1520C0340AA882FCCA96A60
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MathDesign-UT-Regular-Symbol-10
%!PS-AdobeFont-1.0: MathDesign-UT-Regular-Symbol-10 2.0
%%CreationDate: Thu, 29 Aug 2013 17:19:55
9 dict begin
/FontInfo 10 dict dup begin
/Version (2.0) readonly def
/Notice ((c) 2004 Paul Pichaureau, under the gpl licence.) readonly def
/FullName (MathDesign UT Regular Symbol 10) readonly def
/FamilyName (MathDesign-UT) readonly def
/Weight (Regular) readonly def
/ItalicAngle 12 def
/IsFixedPitch false def
/UnderlinePosition -98 def
/UnderlineThickness 54 def
end readonly def
/FontName /MathDesign-UT-Regular-Symbol-10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /minus put
dup 2 /multiply put
dup 106 /bar put
readonly def
/PaintType 0 def
/StrokeWidth 1 def
/FontType 1 def
/FontMatrix [0.001000 0.000000 0.000000 0.001000 0.000000 0.000000] readonly def
/FontBBox {-12 -1340 1252 951} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC4458BEF7EB4BF9CA685821DAAAEB8ADF
892F4EB5CC669C655007A1C4B5E91678CDCF7A89B25FB0FB53FF6D3A61CB7231
A1EFBC7D17D40265074C7528E4523FC36BDBE32CF0CCDB6D3AAB064540916BBB
F6400E79B0D769C1CFC9F219BDE40F7AFE53D3C15AD879B51CD0D19A11160BFE
160278724512B082FF8FD28F8D9D5D0739CFB0CFB691F56358EDE43F651287EA
2411E5C5693CCAAD08519246A1F7394606CCEA24B236F7389B7C6728456626B0
577EA8B39FD691E8D8FF16C9FD07FDC7921FF346ACBA0F5C9EA424CB0B2EA314
16A005EE683B428A2D2D1A6A15ED5466BC80AD8D0570AFA303CE914C678386B6
07865906F4276B92EA7C98932F14851F8155040BB2B7C70C0C9321B6A62285E0
7D38CF8A938C5FC6B89352CD3593A4FEB66954072B94C019B9ED49EE4EC7E0AE
AE48940A702310FEE3D1E8894371757AA34E684E040A913FE712593371E4A2C6
496F6CA0CBD0C205E3FD95965B32AA6D1F4233469A1434098A2A2BCC9B08312D
EF48D09D0260A1E02978DCC651A74B2D99038B2AC16FD3729746E24084BA437B
AAC63A7A2DBCC89CFD7FD0115E7809711E92AD1A95B3174E67523AAA40603643
568AC4661FC0BF21A3A37D08F7756FEE7A74F4A3C645629EFFA4BEFEF608C541
EE55684EBCA163A0123D7B83CA9468D4BAD04CC423FD17A6180B8A42893E7AE6
F0D98F99EE8C5B8A4C7C39689B51C337D4309EC4C161751901B8E305A51174A3
52B4287124520AE198A10E1E8A1F9B671148DFAFCA347C9D511F10B7F4BE8706
B2E1D860CAD9F2BDAA644CB25A2AE17E65989C554B680E31469B6B9E53CD2AC5
B6236AE9C148AC2EDEB838D01627CBCA08DEE001A969A2171302D9D4469ED144
17F4FC02725AC6A3C0D023318435EF68C1E3D27777E8BA3B00F0A77D32FEC3BE
F0851050538E45282B2A3D6CA86FD032B4540EF00CF5D8AF000FACB7642CB47B
759CF35BABB120CA770A4BD773638E5CB91B1AC3ED44705B71660F8302A34E49
9F546E807ECC4DAD864C8B48160EF78BCB60000904BEB0C1F3CFF594E0CB62B3
7B4EB0E0D344A118752F23BEBF39916EC4DE4C80C2F4E2359B4C709E592B5338
8D3B46FBF5AB16D7E2A3FC0168B7C9C2867719E8378E8B4F9AED1D20E820837F
C905F3E55706DAA729832456E229AF679D028C40BD82C9831CAF6CF715A7DAFE
6062658B0FBB524AEDC1FCB8473009599E8F29A5645DA0F2D711FB4D9FE97794
6FAAB7F7E180C167773A98E09E6A816DD798DE9E9F2DEA716EC2A5490D42439F
D75C1D03150A205ED5A9F1AE7ED883C062C2AF78CFC9EDD1195D91EE4100B95D
DBEFF4B5B4EC8323F4888EFD14DD9D06240C3A8202A45E454A8F91807CE5E62A
4B6761FE00CD45999E4168F9897533821E65CB242F012B21B236804BEB108B7B
D46F6FD9890F48A6FEC6E96451984D69CC0386AFF4493F0C107C07755CBC68FF
22777B0126D29D68C53DE38C5477D491DD2BD3B34B2B90E2201E26482E50762E
0C5A08FDE9C04545EC61E1915D681486EBBFE34FEB190FE6FB317F3C1939F254
90D354A5D20C667C77B45258D4F439A84D2B9544E6886E42F79470569B2E1535
6741C42ADE2706A509E91C0418717358A44BECCC25CE96CD5CDD217EDC46D901
A994AA22CA11DB508B92A01FC5AA627464C74FDBD0CCF95087074CC2543604C8
9A8E2716987F24B40C90A3A4335C6936A302C8560605B308A0436B7F19AC12B8
3CB3C7A66693B1CC2A90B4554D43A47C594266CA78DAF8B6868607AD22948C6A
30E9A1B82FF6753842D6DC1A9738732061F606A2DD192F3B9ED00FA1FDBE3EFE
7981E70EE7BA6144891F3F9B3BAAE1A1970147DB21457B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MathDesign-UT-Regular-Extension-10
%!PS-AdobeFont-1.0: MathDesign-UT-Regular-Extension-10 2.21
%%CreationDate: Thu, 29 Aug 2013 17:19:58
9 dict begin
/FontInfo 10 dict dup begin
/Version (2.21) readonly def
/Notice ((c) 2004 Paul Pichaureau, under the gpl licence.) readonly def
/FullName (MathDesign UT Regular 10) readonly def
/FamilyName (MathDesign-UT) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/IsFixedPitch false def
/UnderlinePosition -98 def
/UnderlineThickness 54 def
end readonly def
/FontName /MathDesign-UT-Regular-Extension-10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /integraltext put
readonly def
/PaintType 0 def
/StrokeWidth 1 def
/FontType 1 def
/FontMatrix [0.001000 0.000000 0.000000 0.001000 0.000000 0.000000] readonly def
/FontBBox {-39 -3331 3250 928} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC4458BEF7EB4BF9CA685821DAAAEB8ADF
892F4EB5CC669C655007A1C4B5E91678CDCF7A89B25FB0FB53FF6D3A61CB7231
A1EFBC7D17D40265074C7528E4523FC36BDBE32CF0CCDB6D3AAB064540916BBB
F6400E79B0D769C1CFC9F219BDE40F7AFE53D3C15AD879B51CD0D19A11160BFE
160278724512B082FF8FD28F8D9D5D0739CFB0CFB691F56358EDE43F651287EA
2411E5C5693CCAAD08519246A1F7394606CCEA24B236F7389B7C6728456626B0
577EA8B39FD691E8D8FF16C9FD07FDC7921FF346ACBA0F5C9EA424CB0B2EA314
16A005EE683B428A2D2D1A6A15ED5466BC80AD8D0570AFA303CE914C678386B6
07865906F4276B92EA7C98932F14851F8155040BB2B7C70C0C9321B6A62285E0
7D38CF8A938C5FC6B89352CD3593A4FEB66954072B94C019B9ED49EE4EC7E0AE
AE48940A702310FEE3D1E8894371757AA34E684E040A913FE712593371E4A2C6
496F6CA0CBD0C205E3FD95965B32AA6D1F4233469A1434098A2A2BCC9B08312D
EF48D09D0260A1E02978DCC651A74B2D99038B2AC16FD3729746E24084BA437B
AAC63A7A2DBCC89CFD7FD0115E7809711E92AD1A95B3174E67523AAA40603643
568AC4661FC0BF21A3A37D08F7756FEE7A74F4A3C645629EFFA4BEFEF608C541
EE55684EBCA163A0123D7B83CA9468D4BAD04CC423FD17A6180B8A42893E7AE6
F0D98F99EE8C5B8A4C7C39689B51C337D4309EC4C161751901B8E305A51174A3
52B4287124520AE198A10E1E8A1F9B671148DFAFCA347C9D511F10B7F4BE8706
B2E1D860CAD9F2BDAA644CB25A2AE17E65989C554B680E31469B6B9E53CD2AC5
B6236AE9C148AC2EDEB838D01627CBCA08DEE001A969A2171302D9D4469ED144
17F4FC02725AC6A3C0D023318435EF68C1E3D27777E8BA3B00F0A77D32FEC3BE
F0851050538E45282B2A3D6CA86FD032B4540EF00CF5D8AF000FACB7642CB47B
759CF35BABB120CA770A4BD773638E5CB91B1AC3ED44705B71660F8302A34E49
9F546E807ECC4DAD864C8B48160EF78BCB60000904BEB0C1F3CFF594E0CB62B3
7B4EB0E0D344A118752F23BEBF39916EC4DE4C80C2F4E2359B4C709E592B5338
8D3B46FBF5AB16D7E2A3FC0168B7C9C2867719E8378E8B4F9AED1D20E820837F
C905F3E55706DAA729832456E229AF679D028C40BD82C9831CAF6CF715A7DAFE
6062658B0FBB524AEDC1FCB8473009599E8F29A5645DA0F2D711FB4D9FE97794
6FAAB7F7E180C167773A98E09E6A816DD798DE9E9F2DEA716EC2A5490D42439F
D75C1D03150A205ED5A9F1AE7ED883C062C2AF78CFC9EDD1195D91EE4100B95D
DBEFF4B5B4EC8323F4888EFD14DD9D06240C3A8202A45E454A8F91807CE5E62A
4B6761FE00CD45999E4168F9897533821E65CB242F012B21B236804BEDED3C4C
F20DB259A3000F3489C16795AC547B55AF5E77DC5F6CB0BF2206E4772A1DAE4E
D90966EEB16A7C895CFE34BF5B036513CA34091EF4385881DF6A2199538FB818
F6B43D379B2DAEA6909A748FB0F0A0F4EBC272468A631B70E917F1906D694370
236346C87BC13A8AE4DE8421F92C471548FFEAF0D0B80FD9802CAD1D1C9898CB
458F1F6CF773C9BEEDB099BE26CFBD4560F9DFED8FBE5BE1ED313E4AFB5540ED
F00329E12CD2E9B0ACF32B2279B311A6C60E63317F30AAC05AF2A864169C7472
2FB3900E4EDF6D7A7C9A26F7E42400C38BDC6A49AFD2EA15D2C03647726C6C72
D7CBB6EB6483F6424049284D5C5183159A249F970B08AD347B661D0BCBFD8B86
93016E4343A620F23F0A6D3239519D4E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MathDesign-UT-Regular-MathItalic-10
%!PS-AdobeFont-1.0: MathDesign-UT-Regular-MathItalic-10 2.0
%%CreationDate: Thu, 29 Aug 2013 17:19:40
9 dict begin
/FontInfo 10 dict dup begin
/Version (2.0) readonly def
/Notice ((c) 2004 Paul Pichaureau, under the gpl licence.) readonly def
/FullName (MathDesign UT Regular MathItalic 10) readonly def
/FamilyName (MathDesign-UT) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/IsFixedPitch false def
/UnderlinePosition -98 def
/UnderlineThickness 54 def
end readonly def
/FontName /MathDesign-UT-Regular-MathItalic-10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 25 /pi put
readonly def
/PaintType 0 def
/StrokeWidth 1 def
/FontType 1 def
/FontMatrix [0.001000 0.000000 0.000000 0.001000 0.000000 0.000000] readonly def
/FontBBox {-3 -258 937 809} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC4458BEF7EB4BF9CA685821DAAAEB8ADF
892F4EB5CC669C655007A1C4B5E91678CDCF7A89B25FB0FB53FF6D3A61CB7231
A1EFBC7D17D40265074C7528E4523FC36BDBE32CF0CCDB6D3AAB064540916BBB
F6400E79B0D769C1CFC9F219BDE40F7AFE53D3C15AD879B51CD0D19A11160BFE
160278724512B082FF8FD28F8D9D5D0739CFB0CFB691F56358EDE43F651287EA
2411E5C5693CCAAD08519246A1F7394606CCEA24B236F7389B7C6728456626B0
577EA8B39FD691E8D8FF16C9FD07FDC7921FF346ACBA0F5C9EA424CB0B2EA314
16A005EE683B428A2D2D1A6A15ED5466BC80AD8D0570AFA303CE914C678386B6
07865906F4276B92EA7C98932F14851F8155040BB2B7C70C0C9321B6A62285E0
7D38CF8A938C5FC6B89352CD3593A4FEB66954072B94C019B9ED49EE4EC7E0AE
AE48940A702310FEE3D1E8894371757AA34E684E040A913FE712593371E4A2C6
496F6CA0CBD0C205E3FD95965B32AA6D1F4233469A1434098A2A2BCC9B08312D
EF48D09D0260A1E02978DCC651A74B2D99038B2AC16FD3729746E24084BA437B
AAC63A7A2DBCC89CFD7FD0115E7809711E92AD1A95B3174E67523AAA40603643
568AC4661FC0BF21A3A37D08F7756FEE7A74F4A3C645629EFFA4BEFEF608C541
EE55684EBCA163A0123D7B83CA9468D4BAD04CC423FD17A6180B8A42893E7AE6
F0D98F99EE8C5B8A4C7C39689B51C337D4309EC4C161751901B8E305A51174A3
52B4287124520AE198A10E1E8A1F9B671148DFAFCA347C9D511F10B7F4BE8706
B2E1D860CAD9F2BDAA644CB25A2AE17E65989C554B680E31469B6B9E53CD2AC5
B6236AE9C148AC2EDEB838D01627CBCA08DEE001A969A2171302D9D4469ED144
17F4FC02725AC6A3C0D023318435EF68C1E3D27777E8BA3B00F0A77D32FEC3BE
F0851050538E45282B2A3D6CA86FD032B4540EF00CF5D8AF000FACB7642CB47B
759CF35BABB120CA770A4BD773638E5CB91B1AC3ED44705B71660F8302A34E49
9F546E807ECC4DAD864C8B48160EF78BCB60000904BEB0C1F3CFF594E0CB62B3
7B4EB0E0D344A118752F23BEBF39916EC4DE4C80C2F4E2359B4C709E592B5338
8D3B46FBF5AB16D7E2A3FC0168B7C9C2867719E8378E8B4F9AED1D20E820837F
C905F3E55706DAA729832456E229AF679D028C40BD82C9831CAF6CF715A7DAFE
6062658B0FBB524AEDC1FCB8473009599E8F29A5645DA0F2D711FB4D9FE97794
6FAAB7F7E180C167773A98E09E6A816DD798DE9E9F2DEA716EC2A5490D42439F
D75C1D03150A205ED5A9F1AE7ED883C062C2AF78CFC9EDD1195D91EE4100B95D
DBEFF4B5B4EC8323F4888EFD14DD9D06240C3A8202A45E454A8F91807CE5E62A
4B6761FE00CD45999E4168F9897533821E65CB242F012B21B236804BEDED3C4C
F20DB259A3000F3489C16795AC54627ABDD93BAB2276195F1C8AB164697CE982
1806DEFAB8895451F7DEF7BF6277FB72B6D5DEFA648AC9B6AF858B2C27B516BD
F92B5896E952C6F331015E86136C1D4AFDE709C9E0AF96449C20DCD65BA6A720
5F95B7C32C20E88BAB1BD37012F15B7A78D8F7DBF903F893F6DBE79B27CBFB51
78C3A0BAFA5173004BAB1B065C4A5437AD758F87E6FF3AB4D7603F8F0E2418C4
02E192DD00F878C16728AD6AB7B095DF346BE7C36F5E11DEA110736CABA20171
35DEE85CE619109DC5307E9F352F9B3A2B67520CBAB97466F5217E109231AB24
DC9DA348DCA79A1F0DAADC2685E59E31753FC54C0802A932EDB596751BD9DBDC
AE4CFEBAD97E8EDF78AC65956F8FD17E48779BA9C095F6C382D474308A77E5B9
CCEB02DE1DB61E5825FDD910
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusRomNo9L-Regu
%!PS-AdobeFont-1.0: NimbusRomNo9L-Regu 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE5BEF56C8F8E5E7F8A816BBC6FC1C
6DD666FECD107853612CB37B4E27EC5913BD8F416FC66CE6C23FBF532ADEE1B7
B39FDCF0D0C98D97E9195D68BD030BBDDE3789C01ABE33ED3E54945B0A6BCB56
B37AB30D167324DDEB5737ACDF2CAEA78801DFF16D0C5CD1ED414AA9861BFEDC
C5E536C37344FEFEE6B00CDB5E4863616218D2CC8C2DA31500445B3ECF6C6035
F883EFC0DF2AA759B039D2D408B56CE03452944AEF2FCBF65E4BF33B8C10D57D
D5E2D5FE4553ADA5745AE8EE1F8ACD9A39E4846FE4D215EACFCACD52145B08C9
36B0E3CB343A5E7A06C9115395DC2F92EA95E5ECE5A08EDD146D0742E87C841E
A0267D10E5959961893ED52543012AFA3E5BEF8D7B942444975C89293EDCE411
2DB1830E6C6A01AF6C1A517F86D2C6190AFE9B31BC89297F9E302CF6A3C38A3E
255C3C92048596DE9071855B57954EB8B347918C4920C7142A2AC68231DD2AF5
76742567078B05975B4625D5BF539E5C9D34D5963E2265A1B5466D742363F38A
DF7937A89EE47EAF9B93FAEF03C7DEAD63620945B22BC73737C3350C83B7284B
6047C391A369F897DD1CFD7A456FA223553311D5DABF8FDA806B70BC9271B58F
35434A12E8F25CC476C8A36A6B70113D5EE7B15C46E393933D2C0C9B6E55C213
B5F83F74EAFFABC289CDE655EC5D586D483DA69A56CF9C3EF605898309C7C3D2
0DFBFD10DF5FA30F44D06B774E1ACBF2A59249A4ED17141E8776F8B18AE7F10F
F9EE3A06766DB1C758A8D75A32116FC143C27BBA3C53BA5C3565C2240486DA75
E4C949DE048D1CE9842A920D8CC9EC66930E5533FF3A7328F0675312ECC4569F
8C51F03E409DCE0717779DEA582740E49F088A2481BCFBB63EAE33B6E7DC3B63
E29661537A84CE23036BCC08CCB25B2BADFDB659F305315BE273E5D1D16C9E35
9039CD693DBE128ECB081CF766695B7647FA4C7FBCDE46F1D9E6E73B1BD662B3
C599792AD66B5CBC75DE9AE457EF670B55E2F78AD683079F564F6D60B15A2B0A
06DB37A8BE36083562CA8E19101904A34C40ABE963649785F697D2DF5F0241C0
5C449D8DE546F57A5FE2380BE8DA45A7FD3452FC17F10A319F46512C2612D122
158C723C69AC7843C0DBEA2D226A96B05B86F15244E8940C2F9BE4BDDA2E4322
C0528513DAB7D13C8F1577E599E5C7CBD0FA7384BB45DC7B1701652116A3472C
E2059E675557E53A7F82EE00522358FA4EDD38DB5710EBFE0078093EA47D0DA5
22E23F0F83DA625EF5CC0FC9F75FB7A90677C02630C6B4D6EB1F21A754E413C5
5D5713C9D3ED528247757063E45FB99410D0BB68B865F3E4BB7CF3CD00DA8E49
1D34A99C72207BC789EEC011E3B29A07F16CFCD9CF65AECD4A4628E76309EC9D
0B81B08747404EED051DAB027C501890C4465D71D4E6546813347F0E7BE0B894
0652F6F4383F779695C9A969DE58BEC9A6FBC5BF3799DF85568423E145C6B2DD
38630FF688B69F4881D91D82F55CD5CA984E3974776725AE1BB7E5593DC6B1BA
B456EB62E04FEA0A55503F88BFDF011436D9D5088F353695FA6890A620DD863B
D5364A28DE4283D96979CAC9DD328DE62564D95BD8A43D3FE1E1A51AF1286BD7
A2FA6A9FD41793A8303B6BBCBA18708C378F40466841812F2FE368F51654EF11
5AF46CFBC3800C3ABD39647C5F531173262DA2DBA680F9240B8C62DFD254006B
3D608F4089340F038C4A68DEEF068032B92725B7A5A9D78DAC108CA1FF9400A3
DE2CCD2A72104CFC4B14EBF66B06D640012D108ECD3329117185F2DCC9ED3513
5D445153AFD3F9CADFF576D65850FC5E56513C8C47D478FE1788AF768FE9FE3A
7434E53F28C04EF4088BDF5E020B27F5307E54B6F4A4858CEF9F21F99071FD1B
E21B1AD5042B5AC5A138AC975E2059FE4A3D9AEEC1EA50C522B5A42C4A99B079
ED011928C2CAAFDAB5B1D02A8DBFEAB77B1A9BDBCF210DCC763B41596E5D82BB
9E05390DEEC769C63967F79359D1B296E7B65B1BD866436AA7E2D2C09DDEBD95
B89FEE748E9861B1626F882CF58652ECB0C2EEDE90F796FB129902A069F9E6BC
9C1858BA095342A8B65E71DB1DD9330D991071BCF4EB1F200B6A2B575E124ABA
8BC9EB8BC2F79B368EC29ED24D1FB73E374E602D71EEF218C2070118C720B632
9B63394AFD15347DC7AF1347F5A45720D4500F7D6E49783E9FC958D3954BB473
7612EE40DD89458DF1F326D4F23606C6B8FC607D92DA9CC577679CC1F5AFE345
3AC21512E0FB7C64CA58C9FEC982D0E2E00EA1655DBEBDF66EB4622477B280AC
94BC30B77E5C3240A1A721C9922E1F5BB66C669965C39A91BFAA2284F02BD11F
DE0E5BA107C68B49F80BC01AF2B04A0D7F1783EAAB80313773E1AEEA857364EF
DBD602D587BE6EDD46E091C95E57B5C19979E675BAD35E4B3CE2A37EBB067004
74F4A4F93E85707759EA272AEA401C06D3D5E81C497121E89D672888605828A5
D090488CBDC82A51AE32A41F185B68FD07C22F29FDD8F8FB6205E89A7B698F02
52122B33F45E02D3100BD05B10C476E24A4FB28E8DAB6E2F8437B384E23D0A5A
C8CC9375BFF982E1A068E9C61EA876F4FEA72D94D37EB716ECD75C6A6CAF0F0F
B5F6A73A47FFFB9D6E04D12915D1535769B782BE557DE619C17762B43E66DFFD
C0057DB44F8D19FFC86749D98797B1FAF91568558F00E65C9640021CB1916968
672D187D075731477DAD315CAA69F4DB314DC26ED5B60252DD152E0A1D7AE62D
AB23AEC8325874680134F035A044609A75A7037532E0E981F879B79440CDBF6C
C14F198DBA7A869157CBA36D7147522078C91D8C4067EAC4C72306843A9BC287
11ABCCCB06EB5A36E90C1F95286B0C5DB5092A4FB0EA09E150319A8AA055E3E6
3BB78B7DC142C9C48BC29C175FBD01BF238B753D3E79BC34EE383C4D64239BF6
5B841617AD96D9D7F89ED64975DC69C409BD95426B83175316E6E2ECB7BDE690
2166FD5B960F0CCDBE18D9A9003DF1EA7A2F228667319B6262F09C707192B5A2
F9860B20D5214B61CD6B1DE194DB09E34EB517ED27EBA786DEA3D1CD36DBE511
0E1D36C2F9493EB97CE32F63CD69865AF201C6804F829C4DE8EEAB779AA16B4E
5B040BF8FF666F7C1167CD675098B616D5AAC7CD0A317BB545FCF1D4CC29C833
2F46F00388F75E62D45EA8D01F20F126F94694A52779B387B62E677AB94E2469
60951CE771C000FAB997C8699AA219CB578D5387EA69C8ABBD3F4D0954D767BA
87EE1CBD3BF7B3620B1975A7022DDE36A1D32DC13EF721BD656F5752CFDE4507
90B046D9A3B40DACFBED48C823C53BBDEC24B2BCA0BE52500D43364C2B89E30A
AB7CAE12EE07B0D606F78C7FE9E752007805470CF8FD960389A736A651C8E987
7DF05752E8922F80E756F2D702DE6919F5CE7FC3B92ED8BC69871867A3578589
A939A0B9E63F74BBA9A961D5669EAAEFD9E480D3AC9EF4B833D951CEB6073A23
BD832386EB4D67822AF1D7550E5E7E677064F1C1291F0B78C205A0837805AA0D
7A911CFAE6CEC7CA222024CE0D3D63D6A5ECC07AFE7DC3807891D039AECEAC3F
500A09579E63E3D94570264C5098160CC644902847637FBD2E1DA05A4A7C9DDB
5E76905BDA40053AC0682B3DA7C3FE91CE8731A2FC20C44470BA5BFECD08F2E9
B0678F1C75B4349EB9DA97B3D34B2D59D4B2A379AE1347C5A1FE39542C995923
704C61242B4B1983A5D0B134C8052495CBAA9D2E24173C7FF4D1B05DA751B6C9
A85920A1D2428155925CF143B36F01C6710BCC3064B3896E28AE7389D260CF00
8353EBC222CB1270F3A107F54189426BE04FEC25758A6EA88DF51679CB3AF165
B19E278ED874F8E46362D3AF0726DC076EF963EA3015DFDB2A56BAB31A5EA4CE
AF88A4ADF582AD81A19F11688A44032481C0698FF9E0E605B9FBD258D6E0B6EB
6A57B74E63A3518EC7667E07BA59B3F1C9EED4A8E707FDD5EC67F531382E4E32
D290F9BA2FDC021A3E7FB37914E7F6865A5857BD7887CB412AFFEA2A5985EF99
E3302B40CEB35592BBEB7BC05AE15079E8BD9BE54606BD96D7A485AF1114173E
61A36005E192ED0AA75D40119013F43D9AEC9AEC5A51E00AC57C8E984BAFA927
FC6E077DC85C01A5EF4EA9FD20CE0FA2FCB3E4A639F16CF415B773153D9615BE
D1251E4EE61363C0F137FE530BBF2D38E8B49287A1D890E8CD6EF325DCAD99BF
B021BBE2C5D94D02798238198268D701B543ADCCF2D9506B959EB1924BD4198F
A0051E364D03B20E1E09F4DD5D6247A5892CF4A1D997AA303861016F2C36103F
749C48E2CC80A917B83F955C00BE042DC2D87E2C0ED0A29A9FA6D8C9B7FDB02C
D35113F7FD68DFE38FDD969E5278B505D8299B2AAA7A05FCEF74AADC754D3316
3A4F5A5157766F7391B9AEBDE7F7E0E05AF385B06DF35C2E9E52C953F77B5B5A
D7E02CCA12A44CAAE0DB157CC78AE94596C71136B1C1AF8703A1A0E517BE42CD
6306FC6DB1A2C89A5E92D5BFDC37A921D1D348B83A7885792D31B6A4F40A7C7E
885610064ABE6A2DD27DA4A0F8B831544B74C2EA61C7DAE888148C2F61278C97
F5C86A272FCB25F5238FF43254E38A040E77BEE4381882C5156825CF3BE4F195
2A181D4C901F1F26DBBA77CBF024736361DD27DB6EEC7C98433C6E7140254658
F1625124ADE2C6154DC9C6BDE0FFA5E31F69FBF3EA61BB467DA735BE1F8CD6E6
11627A88D2892C378BFD0A1095A6CE9574E7D5BAA7EDF6D500E92372ADE79BD4
BAB2CAFF3EEE454AB8D57CF7FC4BF61534F73E8772FDDAB87121B6F1A971D738
B40DBAE7620F55C094250618A7ACD6BBE19BE633B01653F4B44E2C3A9B7B739C
A7B4156A404600770BEDA9983E82CB592D2562A121BF636660D2FC653922EA16
6FC377E829EB5FF66E9F543C02BAA1E989E1BDDA6F5B1252670E35238A39421C
1208360D54FB3283AD67590ADEEA3F5BEE429ECC2AA5A23375F75823778CC453
D4116C951D33DA27C405A544C926EB62475AD1D3F7F34C748CE16F76A93E5F81
A7E570389672933EA7C28B31822AA9DC74A4F34B67CA5AECC07A0BB1C59B638E
677A4FC26F9D9A17F28132BDA1195FCFC898D707553AA90560AA32BFC1FB1353
D8E1DD6F912171C1B58B5FE8506C4330DA185CE61BE5B93554A92B38BBE71D4A
8624F7E5A2AC0BA9E61AEB6C09615C5D0AB5D098057BB2FFC2399D9F67A7A438
1C92831E06C4051A3CA7F34164660413E66E1FB5B051B7D6BAF657BE57C1A71D
2F9FC755C4798E56CE6044AA1958EC67013B6AEFB764BFC86DFE3CE4A2AD2F10
14CD74242AB280A45A7030484039E4F06CF06AFC5B28E833D591665A88CBBECC
B9206CBBABDE8C4E5E6E6B61FCFD3C2BA11FCA829D8FC843020887F3103FFDAD
D38034D8F34EBA9B1074CB0228AABBE254290945C744D201C0C179E7DBDA03D6
CF1BAFD7B886C67989542394C22735D4B0620C727CF4EC05248E9B0C2415CBB4
E191E98FB776EBEAEE691735A3DB9FAE17B29A59D2C328CC6D94A70E8C4DDA6D
0A24AE5435A542C8389853B3E316D1F592FBD13388474E716547F63EEF3C0ED3
08218EB19B25DF20C182AE9DC81530238DBF05300C35CAA9F686616449FE094A
5F949D5AE5844566E465F431B5E2B656524B6D481FF9A3F562D294035C5AF753
8DE81B5B4A7A4AC5F69B87DF1F809364B9D23E40724FA9C3DCE3C2B9DED6CD9D
11622AF8528FAB7BC810C8F15E1EC3EF927AD2F5908E08BECB38561268381193
D9F365FDD0926810B6200FCB48A4E44B08BD1489CA01D3E5F54901E7D1914BD6
BCDDFB1413AB6B2BFB920894CDAB8257B74B5B8C0B353E17464C77E0F702FAA0
C7DA18FC3BDEB6B054CB7B30D29428DB0C004A8313CA4860DB28BB323568F5E8
A447846D4564E896032D82B534D66F22EEC2281E4DA5F708AE9248A159110A2D
443BDD878E3751508BA8A2345D9FAB3DA4081B12888F73110F4501ADD9158887
A29445714EA4DE6056D01E9556E32BCDAAC4D241E590E89E5C0B487DFCEF5F60
B7E811771EB87A195B569C808DE21450355F545C3FDC6410C547E3CD9F132F50
12D3D8D791EA36EC4796208DA6912C80B69892B6F740A29C18B3C1840F739B07
E98F14BF905DFCAF59D6D9E428298B61250E0BA6B7C62773830D8C7B5411C069
3E4B9CE8CC572B2EBE18DD84EC0E84629B5DDD36A0CCA32456B388B51398968A
54375896A1D44E90F7ABB42BD6DC397BCB0F724EEDCA5D8D2129258D7D772821
9B5A328ADD27D5C698DE28E34A9E11D8112C3A570A014772E32619AA638F666C
8CEF20402C8D53E4EDC51425328B415AC48ED5AB2B05C46835342E203B460E6A
1D13EE354C6E4DE01721DCF028CA6653A584DFE35BA2B24239EC8320C0D0287E
632548A7C611F6B74E9043152995102AAFA376D2B318AB29C4ED2EF2C2558181
CDE0E8774CD3E1294314FE4F117714C067F0A8BCB64C7BB1CC62CB66B95394B4
FF96211F12FA06B7065EFA3285D98F3662AE71064ABD51E82A063D54A98BED6D
997F3B88A7A080A4C22C13C135BDD03A200D31BD164D30D686B77688864E11CD
4E66B30DB5CB0852685118C8ABBF02466205F2BB7A8A7ECA35251FF8049BD0A5
238DA13D4E65A0296AF2492B2784D2D25CB685825D5A33203113F94DD4036353
5DC2CC04FF97D024BD76B204C5DE06C86869BD18AFB4A08748688321A8A3C57E
EF0256C7BA6A091D794C52CACA9727A07FDB29462BBFA9F54574EBA4947F7726
C499D13EF9DDC58C435B5B6D5D1702367B2DFC601ED98A1C03622AD8156F4E62
55A68F3FC52891009DC2DB8313A8B530F1A3C79A2FF6462AA45C4FAEE4DCA9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 20049949 9006416 1000 600 600 (VorlagePSTRICKS.dvi)
@start /Fb 204[21 51[{ TeXnANSIEncoding ReEncodeFont }1
39.0204 /Utopia-Regular rf /Fc 156[17 99[{
 TeXnANSIEncoding ReEncodeFont }1 39.0204 /Utopia-Italic
rf /Fe 149[14 103[38 1[38{}3 54.6286 /MathDesign-UT-Regular-Symbol-10
rf /Ff 173[43 82[{}1 78.0409 /MathDesign-UT-Regular-Extension-10
rf /Fg 214[17 17 40[{}2 54.6286 /MathDesign-UT-Regular-OT1-10
rf /Fh 230[40 25[{}1 54.6286 /MathDesign-UT-Regular-MathItalic-10
rf /Fi 194[55 19[24 24 40[{}3 78.0409 /MathDesign-UT-Regular-OT1-10
rf /Fk 255[55{}1 78.0409 /MathDesign-UT-Regular-Symbol-10
rf /Fl 182[19 20[29 52[{ TeXnANSIEncoding ReEncodeFont }2
54.6286 /Utopia-Regular rf /Fm 140[21 22 13[32 24 99[{
 TeXnANSIEncoding ReEncodeFont }4 54.6286 /Utopia-Italic
rf /Fn 129[28 126[{}1 54.6286
/MathDesign-UT-Regular-Italic-MathItalic-10 rf /Fo 183[62
72[{ TeXnANSIEncoding ReEncodeFont }1 78.0409 /Utopia-Regular
rf /Fp 140[30 31 13[46 100[{ TeXnANSIEncoding ReEncodeFont }3
78.0409 /Utopia-Italic rf /Fq 129[39 126[{}1 78.0409
/MathDesign-UT-Regular-Italic-MathItalic-10 rf /Fr 133[37
42 42 39[46 31[42 48[{ TeXBase1Encoding ReEncodeFont }5
83.022 /NimbusRomNo9L-Regu rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-600 -600 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -600 -600 a -600 -600 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 -600 a -600
-600 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -600 -600 a -600 -600 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -600 -600 a
%%HiResBoundingBox: 0 0 305.93799pt 137.42703pt
 0 TeXcolorgray
0 TeXcolorgray -529 -30 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  0.85355 SLW 0 0.60783 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.50565 2.0
  1. .setopacityalpha  Arrow  EndArrow  } def  [ 147.95418 -14.22636
91.04869 -59.75093   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.85355 SLW 0 0.60783 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  0.85355 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.50565 2.0
  1. .setopacityalpha  Arrow  EndArrow  } def  [ 147.95418 -36.98865
91.04869 -36.98865   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.85355 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  0.85355 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.50565 2.0
  1. .setopacityalpha  Arrow  EndArrow  } def  [ 119.50143 -2.84544
119.50143 -48.36957   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 0.85355 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -529 -30 a
tx@Dict begin { 127.77077 -45.23975 } PutCoor PutBegin  end
 -529 -30 a -550 -2
a Fr(0)-529 -30 y
tx@Dict begin  PutEnd  end
 -529 -30 a -529 -30 a
tx@Dict begin { 150.67067 -39.54929 } PutCoor PutBegin  end
 -529 -30 a -550
-10 a Fr(x)-529 -30 y
tx@Dict begin  PutEnd  end
 -529 -30 a -529 -30 a
tx@Dict begin { 150.67935 -16.787 } PutCoor PutBegin  end
 -529 -30
a -550 -20 a Fr(y)-529 -30 y
tx@Dict begin  PutEnd  end
 -529 -30 a -529 -30 a
tx@Dict begin { 121.74644 0.28436 } PutCoor PutBegin  end
 -529
-30 a -547 -10 a Fr(z)-529 -30 y
tx@Dict begin  PutEnd  end
 -529 -30 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  0.85355 SLW 0.60783 0.60783 0.60783  setrgbcolor
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4
1.4 1.50565 2.0   1. .setopacityalpha  Arrow  EndArrow  } def  [ 45.52455
19.91682 119.50143 -36.98865   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.85355 SLW 0.60783 0.60783 0.60783  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -529 -30 a
tx@Dict begin { 89.66634 -5.40608 } PutCoor PutBegin  end
 -529 -30 a -559 -9
a Fq(~)-43 b Fp(r)-531 7 y Fm(c)-529 -30 y
tx@Dict begin  PutEnd  end
 -529 -30 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  0.85355 SLW 0.60783 0.60783 0.60783  setrgbcolor
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4
1.4 1.50565 2.0   1. .setopacityalpha  Arrow  EndArrow  } def  [ 68.2864
36.98865 45.52455 19.91682   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.85355 SLW 0.60783 0.60783 0.60783  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85355 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
22.12971 -2.84544 0.0 19.91682 8.85196 59.75093 44.25986 59.75093 79.66776
59.75093 26.55591 -14.22636 22.12971 -2.84544   false  OpenBezier 
gsave 0.85355 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 153.64464 42.67911
  false NArray  /DS 2.84544 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  0.85355 SLW 0.60783 0.60783 0.60783  setrgbcolor
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4
1.4 1.50565 2.0   1. .setopacityalpha  Arrow  EndArrow  } def  [ 153.64464
42.67911 119.50143 -36.98865   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.85355 SLW 0.60783 0.60783 0.60783  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.50565 2.0   1. .setopacityalpha  Arrow
 EndArrow  } def  0.85355 SLW 0.60783 0.60783 0.60783  setrgbcolor
 /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.  scale  false 0.4
1.4 1.50565 2.0   1. .setopacityalpha  Arrow  EndArrow  } def  [ 153.64464
42.67911 45.52455 19.91682   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.85355 SLW 0.60783 0.60783 0.60783  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -529 -30 a
tx@Dict begin { 67.85963 45.80893 } PutCoor PutBegin  end
 -529 -30 a -549 -10
a Fq(~)-579 8 y Fp(d)14 b(s)-529 -30 y
tx@Dict begin  PutEnd  end
 -529 -30 a -529
-30 a
tx@Dict begin { 105.315 40.11847 } PutCoor PutBegin  end
 -529 -30 a -621 -9 a Fq(~)-44 b Fp(r)26 b Fk(\000)18
b Fq(~)-43 b Fp(r)-468 7 y Fm(c)-529 -30 y
tx@Dict begin  PutEnd  end
 -529 -30 a
-529 -30 a
tx@Dict begin { 149.59485 11.66573 } PutCoor PutBegin  end
 -529 -30 a -546 -1 a Fq(~)g Fp(r)-529 -30
y
tx@Dict begin  PutEnd  end
 -529 -30 a -529 -30 a
tx@Dict begin { 161.74509 45.80893 } PutCoor PutBegin  end
 -529 -30 a -552 -3 a Fr(P)-529
-30 y
tx@Dict begin  PutEnd  end
 -529 -30 a -529 -30 a
tx@Dict begin { 234.41039 -16.787 } PutCoor PutBegin  end
 -529 -30 a -870 -21 a Fq(~)-883
-6 y Fo(H)13 b Fi(\()6 b Fq(~)-43 b Fp(r)13 b Fi(\))i(=)-593
-42 y Fl(I)p -620 -26 75 5 v -620 18 a(4)6 b Fh(\031)-526
-76 y Ff(R)-429 -59 y Fn(~)-450 -46 y Fm(d)j(s)f Fe(\002)p
Fg(\()t Fn(~)-31 b Fm(r)9 b Fe(\000)c Fn(~)-32 b Fm(r)-231
-35 y Fc(c)-202 -46 y Fg(\))p -450 -26 265 5 v -406 29
a Fe(j)5 b Fn(~)-32 b Fm(r)10 b Fe(\000)5 b Fn(~)-32
b Fm(r)-297 40 y Fc(c)-269 29 y Fe(j)-255 5 y Fb(3)-529
-30 y
tx@Dict begin  PutEnd  end
 -529 -30 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
